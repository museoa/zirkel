// Help file syntax
// This is the help file for C.a.R., used inside the program
// for context sensitive help, and also to extract HTML
// pages using the Translator program contained in C.a.R.
// Refer to the Wiki for more information.

.index
.related start online license gui
C.a.R.

//image images/ZuL-Logo.png

C.a.R. contains a __context쬼ensitive쬱elp__ than can be called while
using the program. it provides help on the currently active tool. You
are reading web pages extracted from this help. On these web pages,
you will also find a list of __keywords__ and a list of help topics.
Moreover, there is a search function both in the web and in the help
system of the program. 

For more information about C.a.R., have a look at the applications,
demos, tutorials, or the Flash introduction. There is also a
discussion forum on Yahoo, and a Wiki on C.a.R. There is even a
multilingual magazine CarZine about C.a.R. Searching the Web will
reveal many other sources of information about this program.

Much success with C.a.R. wishes you the author

Rene Grothmann

.start
.related online license gui tips localize language
진행중인 작도관련 도움말
(Context sensitive Help)

이 도움말은 선택된 도구나 당신의 마지막 작업에 대한 도움을 제공한다.
예를 들면 매크로 도구를 선택하고 이에 대한 도움말을 얻기 위하여
도움말 아이콘을 누르면 매크로 도구에 대한 도움말을 볼 수 있고
다시 같은 아이콘을 눌러 창을 닫을 수 있다. 또한 C.a.R.창 옆에 놓고 작도를 계속할 수 있다. 

도움말 창 윗부분에는 작업과 관계된 내용의 제목에 대한 드롭다운 창이 있으므로 이를 선택하여 살펴볼 수 있다.
 또한 키워드 검색을 할 수 있다. 예를 들어, “매크로”를 입력하면 “매크로”나 “매크로”가 포함된 글을 볼 수 있다. 
 C.a.R.을 이용한 당신의 탐구에 대한 호의를 보냅니다

저작자 Rene-Grothmann

This help system will give you tips about the current tool, or about your last action. E.g., to get help about the macro tool, choose the macro tool and press the info-button to learn more about it. You can close the window with the same button, or just leave it open. Place the window beside the C.a.R. window to be able to see both. It will remember its position and size. 
 In the upper part of this help window, you see a drop down list with related topics. Please choose one of them to read about it.
 You may also search for key words. Searching for "macro" will also find "Macro", and words containing "macro". The search results are presented in the drop down list too. One of the found topics is opened, if there was a match.
 Best wishes for your work with C.a.R.
 The author Rene Grothmann

.online
.related start tips
온라인 도움
(Online Help)

당신은 나의 홈페이지 "www.rene-grothmann.de"를 통하여 C.a.R.의 홈페이지를 찾을 수 있다. 그 곳에서 새 버전을 얻을 수 있으며 예제와 데모들을 볼 수 있다. 
 나는 야후에 C.a.R에 대한 두 개의 토론방을 열어놓고 있다.  하나는 독일어이고 다른 것은 영어이다. 당신은 C.a.R.홈페이지에 연결된 주소를 통하여 영어로 된 토론방을 찾을 수 있다. 
 물론 당신은 내 홈페이지에 있는 이메일을 통하여 나에게 연락할 수 있다.

You find the homepage of C.a.R. via my homepage at
"www.rene-grothmann.de". You are welcome to look for new versions there, or to browse through the examples and demos there.
 I opened two discussion groups about C.a.R. on Yahoo groups. One is in German and the other in English. You find the English discussion version via the support link on the homepage of C.a.R.
Of course, you can reach me by email. You find my email address on my homepage too.

.license
.related online start
C.a.R 저작권
(License to C.a.R.)

C.a.R.은 GPL기반의 프리웨어인 소프트웨어이고 원하면 항상 사용할 수 있다. 만약 당신이 이를 배포한다면 최소한 나의 페이지에 대한 링크를 포함시켜야한다.

또한 C.a.R.홈페이지를 통하여 소스를 얻을 수 있다. 그러나 이 소스들과 당신이나 다른 사람들이 행한 모든 소스는 공개해야 한다. 당신은 그 소스들과 프로그램에 속한 모든 변화를 제공해야할 의무가 있다. 더욱이 원래의 소스들에 링크하여 제공하여야만 한다.
같은 라이센스를 문서에도 적용한다.

만약 이 프로그램으로 돈을 벌기위해 교재 등의 지도할 수 있는 책들을 덧붙여 제공할 수 있다.
 또한 이 프로그램을 리눅스와 같은 소프트웨어등의 영업용 배급물에 포함할 수 있다.
 당신이 그렇게 한다면 나는 샘플을 정중히 요구한다.

C.a.R. is free software under the GPL (Gnu General Public License) and you are welcome to use the program as you like. If you distribute it, you must include at least a link to my pages. 

You may also get the sources via the homepage of C.a.R. However, these sources and all changes you or others do must remain open. You are enforced to provide the sources and all changes along with the program. Moreover, you must provide a link to the original sources.
 The same license also applies to the documentation.
 If you want to make money with this program, you can do that by providing additional services like books, instructions, tutorials and such. You can also include the program into a commercial distribution of software, e.g., in a Linux distribution. I kindly ask to get a notice, if you that, and a sample, please.

.gui
.related iconbar mouse zoom online keyboard
사용자 환경
(User Interface)

당신이 보고 있는 넓은 부분은 작도를 나타낼 수 있는 C.a.R.의 메인창이다. 보이는 창을 화살표키로 움직일 수 있고 +/-키로 확대/축소시킬 수 있다. 다른 방법으로는 줌 도구가 있고 마우스로 작도물을 이동시킬 수도 있다.

창 위에는 아이콘 바가 있고 마우스를 아이콘들 위에 2초 이상 놓으면 정보가 나타난다.
또한 아이콘 표시는 하나의 바로 나타날 수 있다.
두 줄로 나타내어진 아이콘 바에서 하단의 것은 작도도구를 가지고 있고,
상단 바는 초기 설정과 화면표시를 위한 설정도구를 나타내고 있다.

창 아래에는 화면 상태를 보여주는 상태줄이 있고 이곳에서 화면에 대한 중요 정보를 글로 보여준다.
또한 명령어입력 방식(아이콘 방식이 아닌 경우)인 경우에는 이곳은 명령어 입력창으로 사용된다.


메뉴는 '불러오기'나 '저장하기'와 같이 세부 선택사항을 가지고 있다.
또한 사용할 수 있는 단축키를 보여준다.

The larger area you see is the main window of C.a.R. It displays the construction. The view can be moved with the arrow keys, and enlarged with +/-. Alternatively, there is a tool to zoom and drag the construction with the mouse.

Above the construction you find the icon bar. The icons show tool tips, if the mouse remains over them for more than two seconds. The icon display may also be concentrated into a single bar. In a two line icon bar, the lower bar contains the construction tools. The
upper bar contains default settings, and settings for the display.

Below the construction, there is a status line, which displays important text information. In the non-visual mode, this line is replaced by an input line.

The menu contains many further options, like loading and saving of files. It also displays the keyboard shortcuts to the tools.

.iconbar
.related restricted gui settings
아이콘바
(Iconbar)

원하는 아이콘을 선택하려면 그것을 클릭해야한다.
아이콘 위에  마우스를 잠시 동안 올려놓으면 풍선 도움말이 나타난다.

다양한 유형의 아이콘이 있다.

마우스로 입력하는 아이콘 : 예를 들면 '점'이나 '선'도구, '매크로 만들기', '마우스로 확대 축소'

초기설정을 변화시키는  아이콘 : 예를 들면 '기본 색'이나 '기본 점 모양' 아이콘

보기를 변화시키는 아이콘 : '좌표축/격자점 보이기' 아이콘이나 '숨겨진 개체 보이기' 아이콘

작업하는 아이콘 : 예를 들면 '주석 편집' 또는 '마지막 개체 지우기' 아이콘

'아이콘바 편집' 메뉴를 이용하여 원하는 아이콘을 선택할 수 있다.
더욱이 아이콘들을 한 줄로 나타낼 수 있으나 제한된 아이콘만 보여질 것이다.

아이콘 바를 작업창 아래에 있게 설정할 수 있다.(설정-특별한 설정)

보이지 않는 아이콘도 단축키나 메뉴를 이용하여 사용할 수 있다.

아이콘 바에 있는 도구들에 대하여 더 알고 싶으면 잠시동안 아이콘 위에 마우스를 멈추어라.
풍선 도움말이 보여질 것이고 어떤 아이콘들은 ctrl 키와 같이 선택할 때 다르게 보여진다.
이 아이콘들은 ctrl 키가 눌러질 때 다른 정보를 보여준다.

To select an icon, click on it. To learn more about an icon, hold the mouse over it for a while. A small window will appear with some text explaining the tool.

There are different types of icons.

Icons expecting mouse input: Examples are the point or segment tools, the macro parameter selection or the zooming.

Icons to change default settings: Examples are the default color or the point type.

Icons changing the look: Examples are the grid icon or the icon to show hidden elements.

Icons that do an action: Examples are the setting of the comment or deleting the last object.

To configure the icon bar, start the dialog with the corresponding menu entry. You can select and deselect any icon. Moreover, you can choose to display the tools in a single row. Then the icon bar will only show the most urgent tools.

The icon bar can be set to appear under the construction (see the special settings).

Deselected tools can still be used in the normal mode using the
keyboard or the menu.

To learn more about the tools in the icon bar, hold the mouse over the icon for a while. A short information will appear. Some icons behave differently when selected with the CTRL-key. These icons will show a different information when the CTRL-key is held.

.restricted beginner
.related iconbar
제한된 아이콘
(Restricted Iconbar)

제한된 아이콘을 선택한 상태에서 저장하면 작도물을 불러올 때 제한된 아이콘만 보인다.

제한된 아이콘을 설정하기 하려면 설정의 '제한된 아이콘' 메뉴를 선택하여라.
그리고 '아이콘 바 편집'을 편집하여라.
모든 불필요한 도구들이나 당신이 만든 작도물을 사용하는 사람들이 혼동할 수 있는 모든 도구를 삭제하여라.

'새로 만들기'를 선택하면 제한된 아이콘을 사용할 수 없고 모든 아이콘이 나타나는 상태로 되돌아간다.

또한 초보자를 위한 '초보자 방식'이 있다. 여기에는 혼동시킬 수 있는 몇몇 도구들이 빠져있다.
초보자들은 이 모드에서 시작하도록 한다.

There is a restricted form of the icon bar, which is saved with the construction. The user will see this restricted icon bar, when he loads the construction.

To set the restricted icon bar, select this item in the options menu.
Then edit this icon bar. Remove all unnecessary tools, or all tools that could confuse the user of your construction.

Once you disable the restricted icon bar, of when you load a new construction, you get back your full icon bar.

There is also a special icon bar for beginners. Some tools that could be confusing are missing here. Beginners should start in this mode.

.mouse
.related gui settings hide point circle move keyboard edit
마우스
(The mouse)

마우스 왼쪽 버튼은 -일반적으로 사용되는 도구를 이용하여- 작도할 때 사용된다.

대부분의 도구를 사용 할 때에는 하나 이상의 개체(점이나 선, 원)가 필요하다.
첫 번째 점은 두 번째 점이 찍힐 때까지 빨간색이 된다.
만약 선이나 선분이 필요하다면 당신은 화면 위의 어느 곳을 클릭해도 된다.

만약 그것이 선택 가능한 개체일 경우에는 개체의 색이 변하며 강조되어진다.
이 과정은 적당한 개체 선택을 쉽게 한다.

만약 여러개의 개체가 겹쳐있으면 개체 선택 창이 열린다.
개체 선택 창에서 원하는 개체를 더블 클릭하거나 선택한 후 확인 버튼을 클릭한다.
개체 선택 창에서 점은 검정색, 선은 빨간색, 각(그리고 다른 개체)은 초록색, 원은 파란색으로 나타내어질 것이다.
특별한 설정에서 '개체 선택창 보이기'를 해제하면 자동적으로 가장 가까운 개체를 선택할 것이다.

중요한 특징은 만약 사용자가 도구 사용 중 이미 만들어진 점이 없는 어떤 곳을 클릭하면 점이 자동적으로 생성될 것이다.
더욱이 사용자가 교차점 위를 클릭하면 자동적으로 교차점이 생성된다.
또한 사용자가 개체를 클릭하면 개체 위로 제한된 점이 만들어진다.

만약 원, 선분이나 각을 작도하는 도중에 SHIFT 키를 누르면 편집창이 열리고 그 개체의 크기가 고정된다.
여기서 사용자는 그 개체의 크기를 바꾸거나 현재값을 사용할 수 있다.

오른쪽 마우스 버튼은 점, 개체의 이름을 이동시키고, 개체에 대한 편집창을 연다.
만약 개체이름을 오른쪽 마우스로 클릭하고 움직이지 않으면 그것은 원래의 자리로 돌아간다.
만약 SHIFT 키를 누른 상태에서 개체 이름을 선택하면 이름을 화면 위에 자유롭게 이동시킬 수 있다.

CTRL 키를 누른 상태에서 마우스 오른쪽 버튼을 누르면 개체의 속성을 편집할 수 있다.(조건편집 창)

CTRL+SHIFT+(마우스 오른쪽 버튼)을 같이 누르면 개체는 사라진다. 원, 호와 직선은 부분개체가 되고 한번 더 클릭하면 사라진다.

The left mouse button is used to create construction objects according to the currently active tool. 

Many tools expect that the user chooses more than one object. In this case, the first point becomes red, while the tools is waiting for the second point. If a line or a segment is needed, you can click anywhere
on the object.

Objects under the mouse will be highlighted, if they could be used in the current step. This makes it easier to select the proper objects. 

If the choice is not uniquely determined, the program will display a list of possible objects.
One can take an object from this list by double clicking on it, or by selecting it and pressing of the button,
or with the keyboard. Points will be black, lines red, angles (and other objects) green and circles blue.
The selection dialog can be disabled.
The program will then select the closest of the objects automatically.

An important feature is, that a point will be automatically created, if the program expects the user to select a point,
and the user clicks on free space. Moreover, intersections will be created, if the user clicks on an intersection.
Also, points will be bound to objects if the user clicks on an object.

If the SHIFT key is pressed, when a circle, a segment or an angle is constructed, the program will assume that the object is to be fixed and will display the object dialog. Here the user can enter a value to fix
the object, or simply close the dialog and use the current value.

The right mouse button moves points (alternatively to the move tool), labels of objects, and it opens the settings dialog for objects. If a label is right-clicked but not moved, it jumps to its default position. If the Shift-key is down, when the label is selected, it can move anywhere on the construction.

With the CTRL key plus the right mouse button, one can edit the conditions for object properties.

With the CTRL key and the SHIFT key plus the right mouse button, an object can be hidden. Circles and lines will first become partial, then hidden.

.background
.related gui move htmlexport
배경 화면
(Background Pictures)

C.a.R은 작도물 바로 뒤에 그림을 나타낼 수 있다.
이미 작도된 화면이나 그림 파일을 배경화면으로 사용할 수 있다.

파일로 불러온 그림은 바둑판 모양, 가운데 맞춤이나 그림 크기 변경을 선택 할 수 있다.
불러온 그림의 크기에 따라 프로그램 창의 크기를 변경하는 특별한 선택이 있다.

만약 그림이 정확히 윈도우 크기와 같다면 링크는 HTML내보내기에 따라 저장될 것이다.
이 경우 애플릿 크기는 그림 크기가 될 것이다. 또한 애플릿 디렉토리에 그 그림을 넣어야 한다.
만약 그림을 다른 디렉토리에 넣었다면 HTML파일을 편집해야 한다.

C.a.R. can display a picture behind the current construction.
This picture can be a construction state or a picture loaded from a file.

A picture from a file can be tiled, centered or stretched to fit the construction window. 
There is a special switch to resize the program window to the size of the loaded picture. 

If the picture fits the window size exactly, a link will be saved along with the HTML export. 
The applet size will be the picture size in this case. You must publish the picture in the applet directory.
Please edit the HTML file, if you publish the picture into another directory.

.properties
.related edit conditions colors hide mouse transparent point fixedangle replay animatebreak expressionsyntax latex
개체성질
(Object Properties)

오른쪽 클릭이나 편집도구로 개체의 편집창을 연다. 
대부분의 환경설정은 모든 개체에 공통적으로 적용된다.

 - 이름
 - 설명
 - 단위
 - 색
 - 두께
 - 숨기기
 - 이름보이기
 - 값보이기
 - 글자의 크기와 두께
 - 배경상태
 - 투명상태
 - 중단점

이름은 거의 모든 문자를 포함할 수 있다. 
이름에 "~"이 포함되어 있다면 ~의 앞부분만을 보여주어, 여러 개체를 같은 이름을 보여지게 할 수 있다. 
그러나 이름은 유일해야 한다.
설명은 자동적으로 생성되지만 바꿀 수 있다. 

개체는 고유이름 뿐아니라 별칭도 사용할 수 있다. 
$...$사이에 입력하는 Latex코드를 사용하면 유용하다. 
별칭은 %...%로 수식을 포함할 수도 있다. 
%=s%형식은 "s"개체의 최근이름으로 전환될 것이다. 
%~s%형식은 "s"의 방정식으로 전환될 것이다. 

어떤 개체는 크기와 단위를 가진다. 
크기를 바꾸는 것은 고정된 개체에 작용한다. 
단위는 cm 등과 같은 문자를 입력한다.
각의 경우는 "°" 기호를 입력한다.

두께는 서로 다른 개체를 구별한다. 
하얗고 두꺼운 선은 개체를 볼 수 없게 하지만 이름은 보여진다.

개체를 숨기거나 완전히 감출 수 있으나 개체목록창을 통해서 접근할 수 있다. 

이름과 값은 "s=2"처럼 연결되어 보인다.
이름에서 "P_"처럼 이름 옆에 _를 붙이면 이름과 값 사이의 등호가 생략된다.

어떤 개체는 원이나 각처럼 내부가 존재한다. 
더욱이 투명상태가 되거나 안되게 할 수도 있다. 
일반적으로 내부가 존재하는 개체만이 배경으로 하는 것이 아니라 다른 개체도 배경으로 놓을 수 있다.
배경에서 개체의 겹치는 순서를 조건적으로 설정하는 것이 가능하다.(조건편집-겹치는 순서)

중단점은 재생과 중단점까지의 애니메이션에서 중요하다. 

편집창의 아래쪽 버튼을 보라. 
예를 들어 점은 개체묶는데 선택하는 특수한 버튼이다. 
고정된 각과 원은 크기를 정하는 특수한 버튼이다. 
창을 닫고 사용자는 작도에서 개체나 크기를 선택해야 한다.(상태 바의 지시를 참고) 

Open the properties dialog of an object with a right click, or with
the edit tool. Most settings are common to all objects.

 - name 
 - description 
 - unit 
 - color 
 - thickness  
 - hiding state 
 - show name 
 - show value 
 - large of fat font 
 - background state 
 - transparent state 
 - breakpoint

Names can contain almost all characters. If they contain "~", the
display will only show the part before the tilde, allowing the same
displayed name for more than one object. The name must be unique.
Descriptions are generated automatically, but can be changed. If they
are changed, the user can revert to the automatic description by
entering an empty line.

Objects can use another name (an alias) for display than the internal name.
This is useful, if the display contains Latex code enclosed in $...$.
The alias may contain expressions in %...% which are evaluated at run
time. Strings of the form %=s% will return the current name of object
"s", and strings of the form %~s% will return the equation of s.

Some objects have a size and units. Changing the size works only for
fixed objects. Units can be any text after the size. For angles, use
the degree symbol.

The thickness works differently for different objects. The
white thickness makes the object invisible, but not its label. Objects
can be hidden or completely hidden. In the latter case, they can only
be accessed through the construction description. 

Name and value display can be combined as in "s=2". If the name ends
with an underscore as in "P_", the "_" will be deleted and there will
be no "=".

Some objects have a filled state, like circles and angles. Moreover,
transparency can be switched on and off for these objects. Normally,
only filled objects are in the background, but other objects can be
set into the background too. Note, that using conditional formatting a
specific order of the objects in the background can be achieved.

Breakpoints are important for replay and for the animation of 
breakpoints.

Also, look at the buttons on the lower side of the properties dialog.
E.g., points have a special button to choose an object to bind to,
fixed angles and circles have a special button to set the size. The
dialog will close and the user has to select the objects or sizes from
the construction.

.latex
.related properties text
라텍 코드
(Latex Code)

C.a.R.은 라텍 형식으로 수식을 표현하기위해 HotEqn을 사용한다.  
라텍코드를 사용하려면 $...$을 포함시켜야 한다. 
라텍 코드는 수식 이름이나 개체 이름처럼 개체의 텍스트 라인에서 사용될 수 있다. 
이 경우 $P_1$처럼 진열용 이름을 표현하는데 유용한다. 

HotEqn은 모든 라텍 코드를 보여줄수는 없지만 상당히 많은 부분이 가능하다.
(\alpha, \beta, ...)같은 모든 그리스문자를 지원할 뿐아니라 (\nabla)같은 많은 라텍심벌도 지원한다. 
일반적인 라텍에서는 없는 \percent와 \dolla도 지원된다. 
아래첨자(x_n)와 위첨자(x^2)도 지원되고 분수(\frac{1}{x} or \dfrac{1}{x})도 지원된다.
적분과 수열합기호 (\int_a^b)로 지원되고 limit와 suprema (\lim_{x \to \infty})도 지원된다.  

큰 괄호(\left[ and \right])도 유용하다. 
배열(\begin{array}{cc}2&3\\3&4\end{array})도 지원된다.
이항분수도 표현되고 atop ({2\atop 3})도 표현된다.  

더 중요한 것은 HTML문서로 보낸다.

C.a.R. uses HotEqn to display equations in Latex form. To use Latex code, 
enclose the text in $...$ signs. Latex code can be used in lines of
text objects, expression labels or for names of objects. It is useful
to use a specific display name (an alias) like $P_1$ in this case. 

HotEqn cannot display all Latex code, but quite a lot. First of all
the Greek letters are supported (\alpha, \beta, ...), as well as many
specific Latex symbols (\nabla). Also supported is \percent and
\dollar, which is not in the normal LaTeX. Of course subscripts (x_n)
and superscripts (x^2) are supported and fractions (\frac{1}{x} or
\dfrac). The big operators, like integration and summation are
supported (\int_a^b), as well as limits and suprema (\lim_{x \to
\infty}).

Moreover, big brackets are useful, like (\left[ and \right]). Arrays
are also supported (\begin{array}{cc}2&3\\3&4\end{array}). The
binomial fraction is expressed with choose, and there is also atop ({2
\atop 3}).

For more information, refer to the HTML documentation.

.transparent
.related colors reorder properties
투명도
(Transparancy)

Java 1.2 이후 버전에서는 투명한 개체가 가능하다.
예전의 자바 시스템에서는 개체가 투명하게 나타나지 않았다. 
더구나 EPS나PDF도 투명도를 지원하지 않았다.  

내부가 있는 개체는 배경에서 맨 처음 그려진다.
이것은 모든 개체의 편집창에서 바꿀 수 있다. 
그런다음 개체는 작도의 순서에 따라 그려질 것이다.  

투명도는 개체편집창에서 바꿀 수도 있다. 

Transparent objects are possible, if Java 1.2 or better is used. On
older Java systems, objects will never appear transparent. Moreover,
neither EPS nor PDF export does not support transparency.

Filled objects are drawn at first to get in the background. This can
be switched on and off in the settings dialog of all objects. Then the
object will be drawn in the order of construction.

Transparency can be switched off for individual objects in their
properties dialog.

.point
.related boundedpoint intersection settings mouse properties selfreference
점
(Points)

점은 다양한 도구로 만들어질 수 있다. 점도구는 일반적으로 움직일 수 있는 점을 만든다.
SHIFT키를 누른 채로 점을 작도하면 고정된 점이 된다. 

2개의 원이나 비슷한 개체의 교점을 클릭하면 교점이 만들어진다. 
이런 자동화된 인식은 초기값으로 선택 안할 수도 있다. 
물론 교점은 자유롭지 못하지만 2개의 교차된 개체에 달려있다. 

점은 원과 선, 그리고 자취, 원뿔곡선, 함수와 같은 개체 위에 놓일 수 있고
이런 점을 만들기 위해 점도구를 이용하여 개체 위를 클릭한다. 


고정된 점은 점의 식이나 점이 놓여진 개체의 식에 의하여 움직여질 수 있다. 
이 경우 위치는 재계산된다. 이것은 점의 움직임을 제한하기에 유용하다. 


점은 편집창의 증가량을 0보다 큰 값을 사용하면 입력된 값만큼 이동하도록 설정된다.
증가량을 1로 설정하면 정수 격자점 위로 움직인다.

다른 개체처럼 움직이는 점은 작도한 후에 바로 드래그 될 수 있고 
드래그하면서 크기와 이름이 보여진다.(특별한 설정)

참고 : 교점, 점과 개체를 보라

A point can be generated by various tools. The point tool will
normally generate a free (moveable) point. If the SHIFT key is
pressed, the point can be fixed with an expression in the point
properties dialog.

If an intersection of two circles or similar objects is clicked, the
intersection is created. A confirmation for this autoamtism is turned
off by default. Of course, intersection points are not free, but
depend on the two intersected objects.

Points can be bound to circles and lines and other objects like
tracks, conic sections and functions. To generate such a point, click
on the object with the point tool. A confirmation for this can be
turned on.

Fixed points can still be moved, if the expression refers to the point
itself and to no other object (@-references don't count). In this case, 
the position is recomputed using the expression. This is useful to restrict 
the movement of points.

Points can be kept on a grid by using a grid increment in the dialog,
which is larger then 0. For an integer grid, use 1. Alternatively,
there are more advanced methods of self referring objects to keep the
point on certain sets.

Like other objects, free points can be dragged immediately after
generation. During the drag, the size and name will display, unless
this option is turned off.

See: Self Reference, Intersections, Points on Objects

.boundedpoint
.related point line mouse properties
개체 위의 점
(Points on Objects)

선, 원, 자동자취, 다각형, 함수의 그래프나 매개곡선 위에 묶여진 점이 있다.
이러한 점을 포함한 개체가 움직인다면 개체 위의 점도 따라 움직인다.
편집창을 이용하여 즉각적으로 새로운 개체와 떼어놓을 수도 있고 묶을 수도 있다. 

점은 개체(원, 각, 다각형)의 경계나 내부에 묶일 수 있다.
개체 내부에 점을 만들기 위해서는 개체 경계선 위에 점의 
편집창의 ‘도형 내부의 점’ 을 클릭하여라.
다른 방법으로는 점의 편집창의 "점을 개체위로 묶기"버튼을 사용하고 개체를 선택할 때 CTRL키를 같이 누른다.

경계위의 점은 점도구나 특별한 도구를 이용하여 만든다. 
더욱이 편집창에서 '점을 개체 위로 묶기' 버튼을 사용하여 나중에 개체와 점을 연결할 수도 있다. 
편집창을 빠져나온 후 개체를 선택한다.(상태바 참고)

점은 개체가 움직일 때마다 따라 움직일 뿐 아니라 개체와 관련된 위치에서 움직이게 된다. 
편집창에서 고정을 선택하면 같은 비율로 움직인다.
초기설정은 고정으로 되어 있다.

연결된 점은 자유롭지 못하다. 
양끝점을 가진 선분에서 양끝점 중의 하나가 연결된 점이라면 그 선분은 고정될 수 있다.  

These are points, which are bound to a line, a circle, automatic
tracks, polygons, function graphs or parametric curves. They will move
in a continuous way, if the containing object is moved. A point can be
released, and bound to a new object at any time using its properties
dialog. 

Points can be bound on the perimeter of objects, or on the inside of
objects, if the object is a circle, an angle or a polygon. To create a
point inside an object, simply create an object on its boundary, and
edit the properties of the object, switching the "inside" flag on.
Alternatively, use the "bind to" button in the dialog of any free
point and press control when selecting the object.

Bounded points are either created with the point tool by clicking on a
line or a similar object, or by a special tool. Moreover, any point
can be bound to an object later on using its property dialog. Exit the
dialog with the button to bind the point, and then select the object.

Points can be bound in two ways. Either the point is projected every
time the object moves, or the point is kept in its relative position
on the object. The relative fix can be removed or set in the object
editor. The relative fix is the default.

Bound points are not free. If however, a segment lies with both
endpoints on a line, and one of them is a bound point (to the line),
the segment can be fixed.

.line ray
.related point parallel properties segment
직선과 반직선
(Lines and Rays)

직선은 2개의 점으로 평행선 또는 수직선 또는 고정된 각의 2번째 반직선이 될 수 있다. 
반직선은 한 점에서 두 번째 점을 통과하는 직선의 일부분이다.

직선과 반직선의 차이는 이 개체간의 시각적인 차이에서 제한되는 것은 아니다. 
교점과 수직선은 직선과 반직선에서 서로 다르게 행동한다. 
예를 들어 교점이 반직선에 없다면 반직선의 교점은 모순이다. 
직선의 교점이 선분위에 없다면 반직선으로 만든 수직선은 모순이다.
이런 행동은 변화가능하다.

수직선도구, 고정된 각 도구, 직선에서 만드는 평행선도 마찬가지이다.  

참고 : 선분

Lines can be lines through two points, parallel or prependicular
lines, or the second ray of a fixed angle. Rays are parts of lines on
one side of the first point through the second point.

The differences between lines and rays is not only restricted to the
visual appearance of these objects. Intersections and perpendicular
lines behave differently for these objects. I.e., intersections with
rays become invalid, if the intersection point is not on the ray.
Perpendicular lines to ray will be invalid, if the intersection with
the line is not on the segment. It is possible to change this
behavior.

Note that the perpendicular line tool, the fixed angle tool, or the
parallel tool generate lines too.

See: Segments

.segment fixedsegment
.related expressionsyntax point parallel properties line
선분
(Segments)

선분은 2개의 점으로 만드는 직선의 일부이다. 
끝점 사이에 교점이 있다면 초기값에 의해 교점은 정당하다.

만약 선분의 한 끝점이 고정되지 않았다면 선분의 길이는 고정될 수 있다. 
이러한 선분을 만들기 위해 두번째 점을 선택하면서 SHIFT키를 누르거나 
특별한 아이콘(편집->직선->길이가 주어진 선분: 이 경우 두번째 점은 
항상 자유로운 점처럼 만들어질 것이다.)을 사용하거나 편집창에서 선분을 고정한다. 

선분은 화살표로 표현될 수 있다. 

참고 :  직선 및 반직선

Segments are parts of lines between two points. Note that
intersections are by default valid only, if the intersection lies
between the endpoints.

The length of a segment can be fixed, if it has one free endpoint. To
generate such a segment, hold the SHIFT key while selecting the second
point, or use the special icon (in this case, the second point will
always be created as a free point), or fix the segment in its property
dialog.

Segments can be displayed as arrows.

See: Lines and Rays

.circle circle3
.related properties point transparency fixedcircle
원
(Circles)

원의 3가지 유형이 있다.
점M을 중심으로 하고 점A를 지나는 원, 점M을 중심으로 하고 반지름 
AB를 가진 원, 고정된 원
이런 유형은 각자의 도구를 가지고 있다.
처음 유형은 두 점이 필요하고 두 번째는 세 점, 마지막은 한 점만 요구된다.

원은 두 개의 정의된 점 사이의 호로 나타낼 수 있다. 
이 경우 호의 각을 180도 보다 작게 유지하는 것이 가능하다.
(호의 끝점을 연결하는 짧은 호로 그려질 것이다.)
원의 편집창에서 호 설정 버튼을 사용하여 끝점을 선택할 수 있다.

원은 색칠할 수 있다. 
호는 활꼴과 부채꼴 모양으로 색칠될 수 있다.

원은 필수적인 부분으로 제한될 수 있다. 
부분원은 관련된 작은 호에 의해서만 그려진다. 

참고: 반지름이 주어진 원


There are three types of circles. Circles around a point M and through
a point A, circles around a point M with radius AB, and fixed circles.
Each type has an own tool. The first kind expects two points, the
second three and the last only one.

Drawing a circle can be restricted between two defining points,
yielding circular arcs. In this case, it is possible to keep the arc
less than 180 degrees (i.e., always the shorter arc will be drawn
connecting the ends of the arc). You select the end points using a
button in the property dialogs of the circle.

Circles can be filled. Arcs can be filled in two ways, either as a
chord section of a circle, or as a pie.

Circles can be restricted to their necessary parts. These partial
circles are only drawn in little arcs through all points related to
them.

See: Fixed Circles

.fixedcircle
.related circle reorder expressionsyntax properties point transparency
반지름이 주어진 원
(Fixed Circles)

반지름이 주어진 원은 반지름을 만드는 점을 가지지 않는다.
이런 원을 만들기 위해서는 중심을 클릭하고 반지름을 정하는 점의 위치를 클릭할 때
SHIFT키를 누르거나 편집창을 사용한다. 편집창에서 반지름 값을 입력한다. 만약 만든 즉시 드래그하면 편집창은 열리지 않고 
최근의 크기로 정해질 것이다.

반지름이 주어진 원은 2개의 점사이의 거리로 부터 크기가 결정될 수 있다.
이것을 하기위해서는 편집창에서 "크기정하기..." 버튼을 이용한다. 

속성창에서 고정된 부분이 해제된다면 반지름이 주어진 원도 마우스로 드래그할 수 있다. 

Fixed circles have no radius point. To generate such a circle, hold
the SHIFT key when defining the radius point, or use the special tool
for this. This will open the settings dialog, where you can enter any
expression for the radius. If the circle is dragged immediately after
the generation, the settings dialog will not open, but the current
size will be used.

Fixed circles can be sized to the distance of two points using an
expression. To do this use the button "Set size ..." in the settings
dialog.

The size of fixed circles can be dragged with the mouse, if the fixed
state is released in their properties dialog.


.intersection
.related point properties segment selectintersection
교점
(intersection)

교점은 '점도구'를 선택한 후 교점을 클릭하면 만들어진다.
또는 '교점도구'를 이용하여 만들수 있다. '교점도구' 아이콘은 기본적으로 감춰져 있다.
그렇기 때문에 대부분의 경우 '점도구'를 사용한다. 

교점은 직선, 원, 함수의 그래프, 곡선, 자취와 같은 일반적인 개체들 사이에 존재한다.
종이 위에 작도할 때에는, 교점을 찾기 위해 특별한 작업을 할 필요는 없다.
그러나 컴퓨터는 가능한 모든 교점을 계산해야 한다.
따라서 이것은 교점을 정확하게 작도하는데 필요한 단계를 더욱 명료하게 한다. 

이차함수, 자취, 원뿔곡선 사이의 교점을 만드는 것도 가능하다.
이와 같은 교점을 계산할 때에는 약간의 시간이 필요할 수도 있다.
복잡한 종류의 많은 교점을 찾을 때에는 작도가 멈춘 것처럼 보일 수 있다. 

참고: 교점 선택

Intersections can either be created by the point tool, clicking on an
intersection point, or with a special intersection tool. The
intersection tool is hidden by default, since the point tool can be
used instead in most cases.

There area intersections between lines, circles, function graphs,
parametric curves and automatic tracks, that are imported into the
construction as normal objects. In paper constructions, intersections
might not be thought of as an extra step to do. But the computer will
compute all possible intersections. Also it makes the necessary steps
much clearer to have to construct intersections explicitly.

It is possible to create intersection between quadrics, tracks, and
conic sections too. Note, that these intersections may need some time
to compute. Creating too many intersections of the complicated kind
will slow down your construction.

see : Selecting Intersections

.selectintersection
.related intersection point
교점 선택
(Selecting Intersections)

원들의 교점은 두 개 임에 주목하라.
이 프로그램은 교점을 만드는 도구의 변수로 두개의 원이 선택되면 교점들을 한꺼번에 만든다.
만약 하나만 필요하면 다른 하나를 감추어라.
자동으로 만들어진 교점일 때에는 다른 교점은 만들어지지 않는다. 

프로그램이 두 원(또는 원과 직선)의 두 교점의 순서를 지정하는 방법에는 미묘한 문제가 있다.
다른 프로그램과 다르게, 이것은 예상되는 일이다.
원을 예로 들면, 원이 움직이면 순서가 바뀐다.
원과 직선의 교점은 직선의 방향에 의존한다. (즉, 점을 만든 순서)
원과 직선이 더 이상 만나지 않을 때까지 직선을 움직인 후 다시 되돌아와 보아라.
교점의 순서는 같아질 것이다. 

때때로 교점은 지정되어 진다.
이것은 교점의 하나가 확실한 어떤 점과 다르다고 말하는 것으로 가능해진다.
교점들은 선택된 점이 다른 점으로 부터 가장 멀리 떨어져 있다와 같이 순서를 줄 수 있다.
교점의 편집창에는 다른 점을 지정하는 부분 또는 대화식으로 점을 선택할 수 있는 버튼이 있다. 

이 경우, 교점이 두 원의 둘레에 있거나 이 점이 명백하게 드러나는 경우
교점이 자동으로 만들어짐에 주의해라. 

당신은 또한 교점이 주어진 점에서 가까운 점이라는 조건을 줄 수 있다. 

원과 함께 선택하면 교점이 사라질 때 자동적으로 순서가 바뀌도록 설정할 수 있다.
자동자취에서는 항상 순서 바뀜 설정 상태로 실행된다.

Note that circles intersect in two points. The program creates both
intersections at once, if the two circles are selected as parameters
of the intersection tool one after the other. If you need only one,
hide the other. 
For automatically created intersections, the other
intersection will not be generated.

There is a subtle problem with the way the program orders the two
intersections of circles (or a circle and a line). In contrast to
other programs, this is done in a predictable way. For circles, the
order will change, if the circles are switched. The intersections
between a line and a circle depend on the direction of the line (i.e.
the order of its creating points). Try moving the line so that it does
no longer intersect the circle, then move it back. The order of
intersections will be the same.

Sometimes the intersection must be specified. This can be done by
telling one of the intersection points to be different from a certain
other point. The intersections will then be ordered such that the
chosen intersection is furthest away from the other point. The dialog
for intersections contains a special field to specify the other point,
or a button to select the point interactively.

Note that this type is intersection is created automatically, if the
other intersection point is a point on the perimeter of both circles,
and if this point is visible.

You an also specify that the intersection should be the one that is
closest to a given point.

Selections with circles can be set to switch automatically whenever
they become invalid. As with automatic tracks, the construction
will then run through all states.

.parallel plumb midpoint
.related line point properties
평행선과 수직선, 중점
(Parallel and Perpendicular Lines, Midpoints)

이것들은 전통적인 작도를 위한 단순하고 손쉬운 방법이다.
처음의 두 가지 도구는 직선을 만든다.
당연히 중점은 점이다. 

선분과 수직인 수직선은 교점이 선분 위에 있지 않을 때 사라지도록 편집창에서 설정할 수 있다. 

These are simply shortcuts for classical constructions. The first
two tools create lines. The midpoint is a point, of course.

Perpendicular lines to segments become invalid, if the intersection
is not within the segment. You can switch that off in the properties
dialog.

.move
.related circle angle background mouse
개체 움직이기
(Move Objects)

이 도구는 점들을 움직인다.(마우스 오른쪽 버튼을 이용할 수도 있다.)
이것은 크기가 고정된 원이나 각을 크기의 변화없이 움직일 수 있다.
이 개체들의 크기를 변화시키려면 개체를 움직이는 동안 CTRL 키을 누르고 있어야 한다. 

직선, 원, 다각형, 원뿔곡선이 독립된 점만으로 만들어 졌다면 이것들도 움직일 수 있다. 

움직임 도구가 선택되거나 ESC 키에 의해 리셑될 때
움직일 수 있는 모든 개체가 붉은색으로 반짝 거린다. 

한번에 여러개의 점을 움직이는 것도 가능하다.
그렇게 하려면 마지막 점을 선택하기 전까지 SHIFT 키를 누르고 있어야 한다. 

움직이는 도중에 SHIFT 키를 누르면 움직임이 제한되어
교점이 사라지지 않는 범위 내에서 움직인다.(교점이 생성되어 있는 경우)
애플릿에서는 애플릿 변수로 'restrictedmove'가 기본값으로 지정되어 있다. 

움직이는 동안 CTRL 키를 누르고 있으면 원래 개체가 보이는 채로 이동한다. 

This tool moves points (an alternative to the right mouse button). It
can also drag the size fixed circles and angles, unless these objects
are fixed for dragging. To unfix those objects, hold down the CTRL
button while moving.

If lines, circles, polygons or conic sections are generated by free
points only, they can be dragged too.

When the move tool is selected or when it is reset with the ESC
key, all moveable objects blink in red.

It is possible to move several points at once. To do this, hold down
the SHIFT key while selecting the points, and release it for the last
point.

When the SHIFT key is hold during the movement, the movement will be
restricted, to the point where an intersection becomes invalid. For
applets, this behavior can be made the default by the
"restrictedmove" applet parameter.

If the CTRL key is hold while moveing, the old construction will be
visible in the background during the movement.

.tracker
.related point animate background mouse objecttracker
점과 직선의 자취
(Manual Point and Line Tracking)

이 도구는 움직이는 점이나 직선의 자취를 그린다.
점의 경우 점의 위치의 자취가 그려진다.
직선인 경우 접선의 자취가 곡선으로 그려진다. 

먼저, 자취를 그릴 점(하나 또는 여러 개) 또는 직선을 선택하라.
그리고 어떤 점, 슬라이더 또는 움직일 수 있는 개체를 
마우스 왼쪽 버튼으로 선택하여 움직이면 자취가 만들어 진다.
자취를 만들 개체를 더 선택하려면 마지막 개체를 선택하기 전까지 
SHIFT 키를 누루고 있으면 된다. 

자취의 색은 자취를 남기는 개체와 같은 색이 된다.
자취는 다른 도구가 선택되거나 ESC 키에 있해 재설정될 때까지 남아 보여진다. 

점과 선의 자취는 섞일 수 있다.
직선, 반직선, 선분에 의해 직선인 자취가 만들어 진다. 

자취가 변하지 않는 개체가 되게 하려면 자동자취 도구를 사용할 수 있다. 

참고 : 점과 직선의 자동자취

This tool draws tracks of moving points or lines. For a point its
position is tracked, and for a line, a curve is generated with the
tracked lines as tangent lines (a polar set).

First one or more point or line to be tracked have to be selected.
Then some point, slider or other moveable object can be dragged with
the left button down to cause the selected object to move and create
the track. To select more than one obejct to be tracked, hold down the
SHIFT key when selecting tracked objects till the last one.

The color of the track will be the same as of the tracked objects, and
the track will remain visible until another construction tool is
selected, or the track tool is reset with ESC.

Point and line tracks can be mixed. Line tracks can be produced
from lines, rays or segments.

To turn a track into a permanent construction object, you have to use
the automatic tracking tool.

see : Automatic Point and Line Tracking

.objecttracker
.related tracker point animate
점과 직선의 자동자취
(Automatic Point and Line Tracking)

이 도구는 원이나 직선을 따라 한 점을 움직여 점과 직선의 자취를 그린다.(자취 참고)
이 때 점이 움직이는 속도는 사용자가 조절할 수 있다.
먼저, 자취로 남길 하나 이상의 점 또는 직선을 선택하라.
shift 키를 누르고 있으면 하나 이상의 점이나 직선을 선택할 수 있다.
다음으로 직선, 원, 슬라이더 위의 점이나 계산식 또는 직선 또는 원을 선택하라.
뒤의 경우 직선이나 원 위를 움직일 점 또한 선택해야 한다.
그러면 점이 움직이거나 슬라이더나 계산식이 바뀌며 선택된 개체의 자취가 만들어 진다. 

첫번째 자취가 병약해지면(더이상 만들어지지 않으면) 자동으로 되돌아 간다.
이 경우 두 원이 더이상 만나지 않기 때문에 첫번째 자취 점은 병약해진다.
대신 움직이는 점이 되돌아 올 때 다른 점이 선택된다.
따라서 가능한 모든 상태에 대해 작도가 실행된다. 

움직이는 속도는 SHIFT와 오른쪽 및 왼쪽 키를 이용하여 줄이거나 늘일 수 있다.
마우스 왼쪽 버튼을 반복해서 클릭하면 '움직이며 자취보기', '자취 없이 움직이기',
'자취만 보기'의 3가지 상태가  반복된다.
마지막 상태에서 마우스 왼쪽 버튼으로 점을 움직이는 것이 가능하다.
어떤 상태에서든지 마우스 오른쪽 버튼을 이용하여 다른 점들을 움직이는 것이 가능하다. 

이 툴이 활성화된 상태에서 작도 파일을 저장하면
파일이 다시 불려 올 때 툴이 활성화된 상태로 불려 온다. 

움직임을 멈추거나 자취를 지우려면 다른 도구를 선택하면 된다. 

This tool draws point and line tracks (as the manual tracking tool) by
animating the movement of a single point along a line or circle, at a
speed which can be controlled by the user. First select one or more
points or lines to be tracked. Hold down the shift key, if more than
one object should to be tracked. Then select a point on a line or on a
circle, a slider or an expression, or a line or circe. In the latter
case, you need to select the point to moved on this line or circle
too. The point will be moved, or the slider or expression be
changed, creating the tracks of the selected objects.

Should the first tracked object become invalid due to an invalid
intersection, the movement is automatically reversed. In case the
first track point becomes invalid because two circles no longer
intersect, the other intersection point will be chosen when the moving
point reverses its movement. Thus the construction runs through all
possible states.

The animation speed can be reduced or increased with the <SHIFT> and
the left or right arrow key. Repeated left mouse button clicks cycle
the animation through 3 modes: animation and track, animation and
hidden track, track with no animation. In the last mode the moving
point can be dragged with the left mouse button. Other points can be
dragged with the right mouse button at any time, but while this is
done, the track will be hidden and any animation paused.

If a construction file is saved with this tool as active tool, it will
become active when the file is loaded.

To stop the animation and clear the tracks, select any tool.

자취유지
(Permanent Tracks)

작도된 개체의 처음 자취를 유지하려면 'SHIFT + ENTER' 키를 눌러라.
새로운 개체(만들어진 자취)는 현재 지정된 색과 두께를 따른다.
자취도 다른 개체와 마찬가지로 편집할 수 있다.
자취와 다른 개체의 교점을 만드는 것과 자취 위에 점을 만드는 것도 가능하다. 

자취는 그 모양이 변할 때마다 계산하기 때문에
오래된 컴퓨터에서는 프로그램이 멈춘것처럼 보인다.
그렇기 때문에 자취의 개수를 제한하는 것이 현명하다. 

참고 : 점과 선의 자취

To make the first track a permanent construction object, press <SHIFT
+ ENTER>, or select the automatic track tool with the control key. A
new object will be created using the currently selected color and
weight properties. The track can be edited in the same way as any
other object. It is possible to create intersections between the track
and other objects, and to put points on the track.

Tracks saved this way are calculated at every change in the figure,
which may slow down the program on older computers. It is therefore
wise to limit the number of tracks, and to restrict their lengths to
reduce the calculation load. Moreover, it is possible to turn the
calculation of a track off or on by using the 멹ixed?checkbox in its
properties dialogue.

See : Manual Point and Line Tracking

.animate
.related circle line
애니메이션
(Animation)

이것은 한 개 또는 몇 개의 점이 선분이나 원 위를 움직이도록 하는 것이다.
애니메이션을 시작하기 위해서 점을 선택한 후 선분이나 원을 원하는 순서대로 선택한다.
마지막 개체를 두 번 클릭하면 선택이 끝난다. 

애니매이션을 멈추려면 화면을 클릭한다.
SHIFT 키를 누른 상태에서 클릭하면 반대방향으로 움직인다.
SHIFT 키와 좌/우 방향키를 이용하여 움직이는 속도를 바꿀 수 있다. 

애니매이션은 저장된다.
애플릿에서, 애니매이션은 사용자의 완벽한 제어를 방해한다. 

직선이나 호를 양방향으로 움직이게 하려면 움직이는 도중에 shift 키를 누른 상태에서
화면을 클릭하면 된다. 이것은 원의 방향을 바꾼다. 

This will animate a single point, moving along one or several
segments or circles. To start the animation, select a point, then a
sequence of segments or circles. Finish by selecting the last point
with a double click.

To stop the animation, click on the construction. To reverse the
animation SHIFT click. SHIFT and right or left key changes the speed of the
animation.

Animations are saved to the construction file. In applets, the
animation will prevent user interaction completely.

To go back and forth on line segments or on arcs, shift click into the
construction. This will also reverse the direction in circles.

.angle
.related circle properties fixedangle
각
(Angles)

일반적인 각은 장식물이며 다른 것을 작도하는데 사용할 수 없다.
A, B, C의 순서로 입력되었을 때, B가 중심점이다. 

각은 네가지 크기로 나타낼 수 있다.
가장 큰 크기는 A에서 시작되는 호로 나타난다. 

각의 크기는 그리스 문자로 나타낼 수 있다.
\a, \A는 알파를 나타낸다.
\0XXXX와 같이 헥사코드를 이용하여 유니코드문자를 나타낼 수도 있다.
(예를 들어, '\01111'는 'ㅍ'을 나타낸다.)
각의 크기가 90도 이거나 '.'으로 시작하는 이름을 가진 경우 크기를 나타나내는
아이콘을 선택하면 '.'이 표시된다.
각의 내부를 채울 수 있다.
별칭을 사용하는 것도 가능하다. 

기본적으로 180도 보다 작은 각이 선택된다.
A와 C의 순서로 그것을 지정할 수 없다.
'180도 보다 큰 각 사용'은 각 편집 창에서 선택할 수 있다. 

다른 개체와 같이 눈에 보이지 않을 만큼 가늘게 표시할 수 있다. 

참고 : 크기가 고정된 각

Normal Angles are decoration and cannot be used to construct anything.
The order of input is A, B, C, where B is the corner point.

Angles can be displayed in three different sizes. The largest size
will display a circular arc, which starts in A.

Angles can have Greek letters in their name. To achieve an alpha,
enter \a, \A etc. You can use all Unicode letters with \0XXXX, where
XXXX is any hexadecimal digit. Angles, which are 90?or have a name
starting with "." will be labeled with a dot, if the size display is
switched on. Angles may be filled. It is probably better to use an
alias for angles to achieve this.

By default, angles are never larger than 180 degrees. The order of A
and C does not matter. However, this can be switched off in the
properties dialog of the angle.

As with other objects, the invisible thickness shows the label, but
not the angle.

see : Fixed Angles

.fixedangle
.related circle reorder expressionsyntax properties angle
크기가 고정된 각
(Fixed angles)

크기가 고정된 각은 세번째 점이 필요없고 고정된 크기가 필요하다.
이것은 각이라기 보다는 반직선이고 할 수 있다.
만들어진 반직선 위에 점을 찍거나 교점을 구할 수 있다. 

이것은 각의 각도에서 SHIFT 키를 누른채로 세번째 점을 선택하거나
'크기가 고정된 각'을 만드는 도구를 선택하여 사용할 수 있다.
이 경우 각의 크기나 식을 입력할 수 있는 편집 창이 기본적으로 열린다.
세 번째 점을 클릭한 채로 마우스를 움직여 크기를 지정하면 이 창은 열리지 않는다. 

'크기가 고정된 각'는 주어진 세 점을 이용하여 크기를 지정하는 것도 가능하다.
편집 창에서 '크기지정' 버튼을 선택한 후 세 점을 선택하면 된다.
이렇게 하면 각 ABC와 같은 크기가 지정된다.
각의 크기를 식의로 지정하는 것 또한 가능하다. 

고정된 각을 반전시킬 수 있다.
따라서 양의 방향이 존재하지 않는다.
더구나 180도 보다 작은 각으로 지정되어 있거나 음의 각으로 지정된 각을 반전 시킬 수 있다.
반전시킬 수 있는 아이콘이 '각 편집' 창에 있다. 

참고 : 각

Fixed angles have no third point, but a fixed size. This type of angle
behaves more like a ray than like an angle. It is possible to
intersect with the ray or place points on it.

Fixed angles is generated by holding down the SHIFT key, while
clicking for the third point, or with the special tool for fixed
angles. This will open the settings dialog, where the user can enter
any expression for the size of the angle. If the angle is dragged
immediately, the settings dialog will not open.

Fixed angles can be sized using three given points. To do this select
the button "set size ..." in the settings dialog an select three
points A, B, C, where B is the corner point. The angle will be the
same size as the angle ABC. You can also use an expression to size the
angle.

Fixed angles can be inverted. Thus one does not have to use positive
orientation. Furthermore, if a fixed angle is restricted to 180˚(which is the default), 
and if such an angle is constructed in a mathematical negative way, it will be inverted.
There is an icon in the settings dialog, which controls the inversion.

see : Angles

.area
.related point properties background
다각형
(Filled Polygons)

이 도구는 주어진 꼭지점으로 내부가 채워진 다각형을 만든다.
영역의 꼭지점을 입력할 때, 마지막 꼭지점은 두 번 클릭한다.
다각형 편집 창에서 '점선'을 선택하면 선분은 감춰진다. 

내부 넓이가 다각형의 값이다.
값의 부호는 꼭지점이 선택된 방향이다. 

This tool generates a filled polygon given the corners. Enter the
corners of the area. Double click the last point. The sides are
hidden, when the polygon has thin thickness in the properties dialog.

The value of the filled polygon is its area. The sign of the value
depends on the orientation of the corners.

.expression
.related angles circles properties reorder expressionsyntax
계산식
(Expressions)

C.a.R.에서 '점의 좌표', '선분의 길이', '원의 반지름', '각의 크기'에 
계산식을 사용할 수 있다. 

게다가 계산식의 값을 화면에 나타낼 수 있다.
계산식 아이콘을 이용하여 화면에 값을 나타내고 마우스 오른쪽 버튼으로 움직일 수 있다.
계산식 상자에 유효한 식을 넣어야 한다. 계산식은 식의 값을 계산하여 보여준다.
이것은 다른 개체와 마찬가지로 마우스 오른쪽 버튼을 이용하여 움직일 수 있다. 

작도에서 사용될 값을 미리 계산 한 후 감춰두고 사용하면 편리하다. 

계산식에서 슬라이더를 지정할 수 있다.
슬라이더는 점을 오른쪽이나 왼쪽으로 움직여 최대값과 최소값의 사이값을 표현한다. 

LaTeX 코드를 이용하여 식을 설명하는 글을 사용할 수 있다.
이 때, '$'를 사용하여 시작과 끝을 알린다. 

참고 : 계산식에서 사용되는 명령어

You can use arithmetic expression in C.a.R. to

 - set coordinates of points, 
 - lengths of segments, 
 - radii of circles,
 - and sizes of angles. 

Furthermore, you can display values of expressions in constructions.
Use the expression tool to place expressions on the screen (and the
right mouse button to move them). You have to enter a valid expression
into the dialog. Expressions may have an explaining text, and may or
may not display their computed value. They are moved like any other
object with the right mouse button.

Hidden expressions are useful to compute values, and use these values
later in the construction.

The value of an expression can be set with a slider. The user will
then be able to set the expression by moving the dot to the right or
left. A slider has a minimal and a maximal value it can reach.

It is possible to use LaTeX code in th explaining text of
an expression. Enclose the code in $ signs for this.

see : Syntax for Expressions

.expressionsyntax
.related fixedangles fixedcircles point properties reorder function
계산식에서 사용되는 명령어
(Syntax for Expressions)

이름 
 예 
 설명 

+, -, *, /,^ 또는 ** 
 3.5*3+3/(4-5^2) 
 기본적인 연산자. 

개체의 이름 
 AB/CD 
 선분, 원, 각, 다른 계산식의 이름으로 이 개체에 종속되지 않아야 한다.
종속된 개체인 경우 '@이름', @"이름"으로 사용할 수 있지만 매크로에서는 사용할 수 없다.
개체를 찾을 수 없는 경우 오류가 발생한다. 

함수 
 sin(a) 
 사용되는 함수는 abs, sign, sin, cos, tan, arcsin, arccos, arctan, sqrt,
exp, log, round, ceil, floor, deg, rad, sinhyp, coshyp, angle180 그리고 angle360 이다.
삼각함수는 육십분번의 각에서 정의된 함수이므로, 호도법을 이용하려면
deg(x)을 이용하거나 rsin, rcos, rtan, rarcsin, rarccos, rarctan를 사용해야 한다. 

사용자 정의 함수 
 f(a)
 변수 a에 대해 정의된 함수 

원주율 
 pi 
 원주율 파이 

x,y,z 
 x(P), y(P) , z(P)
 점의 x좌표, y좌표, z좌표 

거리 
 d(P,Q) 
 두 점 사이의 거리  
d 
  d(P,Q) 
  Distance of two points.
 
증분 
 d(x) 
 계산식의 변화량, 점인 경우 움직인 거리  

합 
 sum(x,f) 
 x씩 증가, f가 음수거나 병약할 때 0으로 재설정됨. 

각 
 a(P,Q,Z) 
 각 PQZ의 크기 

비율 
 scale(x,a,b) 
 x/(b-a)값, x가 범위를 벗어나면 에러. 

if 
 if(e,e1,e2) 
 e가 참이면 e1, 거짓이면 e2. 

값없음 (병약한)
 if(e,e1,invalid) 
 e가 거짓이면 값 없음. 

&&,||,! ! 
 (x<4 && y<4) 
 논리 연산자. 참이면 1, 거짓이면 0 

<, >, <=, >=, ==, ~= 
 x<y 
 비교연산자. ~=는 근사값. 

적분
 integrate(f,a,b) 
 integrate(f) 
 함수 f를 a에서 b까지의 Romberg 방법으로 정적분한 값. f는 반드시 함수이어야 한다.
함수의 y값을 사용한다. f가 불연속 점이면 Riemann 합을 계산한다.
f가 매개변수 함수인 경우에는 곡선의 내부의 넓이가 근사값으로 나타내어지거나
내부가 채워져있지 않으면 곡선의 길이로 나타내어진다.

zero 
 zero(f,a,b) 
 구간 [a,b]에서 함수 f(x)의 부호가 바뀌는 x를 찾는다.
secant 방법이나 또는 interval bisection을 사용한다. 

미분 
 diff(f,a) 
 a에서의 f의 미분계수. (f(h)-f(-h))/(2h)의 극한값을 이용한다. 

최대, 최소 
 min(f,a,b) 
 a,b 사이에서 f의 최소값(최대값)

this 
 x(this) 
 자기자신의 x좌표, 자기자신을 표현 할 때 사용함. 
 
windoww,windowh,windowcx,windowcy
 Returns the dimensions and center coordinates of the current screen.
 
pixel 
 Returns the pixel per coordinate unit. Not to be used in print.
 
simulate 
 simulate(e,x,f) 
 Sets the expression e to to the value x, recomputes the construction with
this new value and returns the value of f. Only one simulation can be
computed at any time, so simulations can not be nested. An expression,
a fixed angle or a fixed circle can be used for e.

내부 
 inside(P,A) 
 P가 점이면 개체 A의 내부에 있는지 확인한다. A가 구간이면 구간의 1/2 값. 다각형, 원, 각에 사용가능. 

Name 
 Example 
 Description
 
+, -, *, /,^ or ** 
 3.5*3+3/(4-5^2) 
 Elementary math.
 
Name of object 
 AB/CD 
 The name of a segment, circle, angle and other expression. The object
must not depend on the current object. To refer to objects
by name there is the syntax @name or @"name". This will not work in
macros, however. If the object is not found, an error will occur.
 
Function 
 sin(a) 
 The functions abs, sign, sin, cos, tan, arcsin, arccos, arctan, sqrt,
exp, log, round, ceil, floor, deg, rad, sinhyp, coshyp, angle180 and angle360. Note
that the trigonometric functions work with degrees. To convert, use
deg(x), or the functions rsin, rcos, rtan, rarcsin, rarccos, rarctan.
 
Pi 
  pi 
  The constant Pi.
 
User Function
  f(a)
  Evaluation of a user defined function object at a.

x,y,z 
  x(P), y(P) , z(P)
  x- and y-coordinates of a point, or the z-value of the point.
 
d 
  d(x) 
  Computes changes of the expression x. If x is a point, it computes
movements.
 
sum
  sum(x,f)
  Sums up x. If f is negative or invalid, the sum is reset to 0.
 
a 
  a(P,Q,Z) 
  Size of angle PQZ.

scale 
 scale(x,a,b) 
 The relative position of x in [a,b), if x is in that interval. Else
the expression becomes invalid.

if 
 if(e,e1,e2)
 Returns e1, if e is valid, else e2.

invalid
 invalid Returns an invalid expression.

&&,||,! ! 
 (x<4 && y<4) 
 Logical expressions. 1 is true, 0 is false.

<, >, <=, >=, ==, ~= 
 x<y 
 Comparing numbers. ~= means "circa equal".

integrate
 integrate(f,a,b)
 integrate(f)
 Integrates the function f from a to b using the Romberg method. f
must be a function object (probably hidden). The y-part of f is
used. If f shows points only, the Riemann sum is computed. If f
is parametric, the area inside the curve is approximated or
its length, if it is not filled.

zero
 zero(f,a,b)
 Find a zero of the function f in the interval a,b. The sign of f
in a and b must be different. The procedure uses the secant method
or interval bisection.

diff 
 diff(f,a) 
 Numerically differentiate f at a. This is the usual approximation
(f(h)-f(-h))/(2h)

min,max 
 min(f,a,b) 
 Computes the point of the minimum (maximum) of f between a and b.

this 
 x(this) 
 Refers to the object containing the expression.
 
windoww,windowh,windowcx,windowcy
 Returns the dimensions and center coordinates of the current screen.
 
pixel 
 Returns the pixel per coordinate unit. Not to be used in print.
 
simulate 
 simulate(e,x,f) 
 Sets the expression e to to the value x, recomputes the construction with
this new value and returns the value of f. Only one simulation can be
computed at any time, so simulations can not be nested. An expression,
a fixed angle or a fixed circle can be used for e.

inside
 inside(P,A)
 Tests, if the point P is inside the object A. Returns 1/2, if it is
on the boundary if A. A can be a polygon, a circle or an angle.

.text
.related replay comment properties latex
글상자
(Text)

여러 줄의 문장을 나타낼 때 사용된다.
문장은 내장된 편집기를 사용한다. 이 편집기는 조건편집하는 아이콘을 포함하고 있다. 

*, ** 또는 ***를 이용하여 굵기나 크기를 표현 할 수 있다. 
Latex 명령어를 사용하려면 문자의 앞 뒤에 '$'를 붙여야 한다. 
게다가 %..%를 사용하면 값을 나타낼 수 있다. %=s%는 개체 's'의 이름을 나타낸다.
%~s%는 개체(도형)의 방정식을 나타낸다. 

감춰진 글상자는 '작도과정 다시보기' 상태에서 보여진다.
이것은 작도 과정의 특별한 지시어를 보이고 감추는데 사용된다. 

This displays a multiline text in the construction. The text can be
changed using an internal editor. This editor contains a button for
the normal dialog for object properties.

To create a bold or large line, or both, precede the line with *, **,
or ***. To use Latex commands, enclose the line or parts of it in
$...$ signs. Moreover, expressions can be used enclosed in %..%.
These expressions will be evaluated, and the text will display the
result. Strings of the form %=s% will return the current name of
object "s", and strings of the form %~s% will return the equation of
s.

Hidden texts appear in replay mode. This allows to show local comments
of constructions steps that disappear later.

.quadric
.related properties point transparent
원뿔곡선
(Conic sections)

원뿔곡선은 x^2, y^2, x, y, xy 그리고 1으로 만들어지는 2차방정식의 그래프이다.
(두 개의 변수를 가진 이차함수) 원뿔곡선은 5개의 점에 의해 결정된다.
단지 5개의 점만 선택하면된다. 

곡선을 일반적인 성질을 편집하려면 곡선 위에서 마우스 오른쪽 버튼을 클릭하면 된다.
편집창에는 만들어진 곡선의 식이 나타난다. 

곡선 위에 점을 찍거나 두 곡선의 교점이나 다른 개체(도형)와의 교점을 찾는 것도 가능하다. 

Conic sections are sets of solutions of equations formed by linear
combinations of x^2, y^2, x, y, xy and 1 (quadratic functions in two
variables). Conics are determined by 5 points. Simply select the 5
points.

To edit the properties of the curve, click on it and use the normal
properties dialog. Conics will display the defining formula as their
value.

It is possible to place points on conic sections, and to intersect
conic sections with other objects.

.hide
.related construction properties mouse
개체 숨기기
(Hiding Objects)

개체를 숨기거나 숨겨진 개체를 보여준다. 숨겨진 개체를 보이려면 
모든 숨겨진 개체를 보여주는 옵션을 사용한다.

개체를 숨기기위해 선택할때 SHIFT키를 누르면 개체는 완전히 숨겨진다. 
이 경우 설정-개체목록창(F11)에서 개체 목록으로 찾아볼 수 있다.
 
 
중복된 개체를 하나만 남기고 감추려면 CTRL키를 누르고 숨기기도구를 누르거나 
편집메뉴의 '중복된 개체감추기'를 선택한다.
 
//image- images/hide.png
This will __hide__ objects, or make hidden objects __visible__. To
make a hidden object visible, you will of course need to enable the
icon to show all hidden objects. Hiding objects can also be achieved
by holding the __Ctrl-key__ and clicking on the object with the right
mouse button. In this case, circles and lines go to the partial state
first, and hide at the second click.

If the __Shift-key__ is held, when an object is selected for hiding,
the object will be completely hidden. In this case, one can make the
object visible again only by using the __object쬵ist__.

With a special menu item it is possible to hide all
__duplicate&objects__. Only the most recent objects will be visible.
Altgernatively, press the __Ctrl-key__ while selecting the hide tool.

 
.rename
.related properties
알파벳순으로 이름 정하기
(Rename alphabetically)


이 도구는 선은 a,b,c로 점은 A,B,C으로 각은 α,β,γ로 마우스로 클릭하면서 이름을 붙일 수 있다. 
사용되지 않은 문자가 먼저 사용된다. 

점을 누를때 Shift키를 누르면 A, B, C로 고정되지만
작도에서 이미 사용된 문자라면 바뀌게 될 것이다. 
다시 A부터 시작하려면 ESC키를 누른 후 Shift키를 이용한다.

두 개의 서로 다른 개체에 "a"라는 문자를 계속 붙이고 싶다면 
"a~1" , "a~2"와 같은 방법으로 이름을 붙이면 모두 "a"로 보인다. 
다른 방법으로는 별칭에 "a"를 입력하면 된다. 

//image- images/rename.png
This tool __rename__s lines to a,b,c, points to A,B,C and angles to
\a,\b,\c with mouse clicks using this tool. The first unused letter
will be used.

Force A, B, C by pressing the shift key when you click on a point.
Letters will then be switched, if they were already in the
construction. To start over, press Escape.

By the way, if you need the letter "a" for two different objects, use
"a~1" and "a~2". Names show only up to "~". Alternatively, use an
__alias__.

.delete undo back
.related construction
개체 삭제하기
(Deleting Objects)

이 도구는 보이는 개체를 기준으로 이전 개체 직전까지 모두 삭제한다. 
취소는 모든 개체를 한번에 되돌린다.

개체와 하위개체를 삭제하는 또다른 도구도 있다. 
취소는 최근에 삭제된 모든 개체를 되돌린다. 

//image- images/back.png
This tool deletes the most recently constructed object, and all hidden
objects before it. Alternatively, use the __backspace쬴ey__.

//image- images/delete.png
There is another tool that deletes any object and all objects depending
on it. Of course, doing so may have unwanted side effects, especially,
if objects use complicated dependencies.

//image- images/undo.png
Undo restores all recently deleted objects.

.function
.related expressionsyntax properties
함수와 곡선
(Functions and Curves)

이 프로그램은 함수와 매개변수 곡선을 제공한다.
함수를 만들기 위해서는 메뉴를 사용하거나 아이콘을 누른다. 
대화창에서 매개변수의 시작값과 끝값, 범위를 입력한다.
원한다면 매개변수이름에 문자열을 사용할 수 있다. 
초기값은 "x"이다.

함수에서 x값은 x 그대로 두고  y값에 "f(x)"를 입력한다. 
이 때 f(x)는 반드시 유효한 식이어야 한다.

매개변수곡선에서는 2개의 함수가 필요한데 하나는 x값이고 다른 하나는 y값이다. 

이 프로그램은 매개변수를 범위 내에서 주어진 간격으로 처음부터 끝까지 증가시킨다.
함수가 유효하면 주어진 간격 사이를 선분으로 잇는다.

함수의 x값이나 y값에는 이미 만들어진 함수를 사용할 수 있다.
이 때에는 만들어진 함수의 y값이 사용된다.

함수와 곡선의 내부를 표시할 수 있다.
매개변수곡선에서 중심은 0이지만 바꿀 수 있다.
바꾸려면 편집창에서 '중앙설정' 버튼을 누른다. 

함수는 불연속 점으로 표현할 수 있다.
'내부색칠하기'가 선택되어 있으면 계단모양으로 표현된다.

//image- images/function.png
The program can display __functions__ and parametric __curves__ in
the construction, or use __user&defined&functions__ of one or more
parameters in other expressions. 

First, we describe the type of functions for display in the
construction window. In the dialog, enter the start and stop
value of the parameter variable and the step size. If you wish, you
can use any string not containing blanks as a parameter name. The
default is "x".

//image images/Function.jpg

For a function, leave the X-value empty or set it to "x", and enter
an expression dependong on "x" for the Y-value. For a parametric
curve, one needs two expressions, one for the X-value and one for the
Y-value.

The program will increment the parameter variable from start to end
using the given step size. If the function is valid between two
parameter steps, a line segment is drawn in the construction
using the construction coordinates.

This type of functions can be used in other functions. The Y-value
will be evaluated then.

Functions and curves can be filled. For a parametric curve, the center is
0, but can be changed. To do that use the __properties__ dialog and
press the "Select Center" button. Functions can be reduced to a
sequence of points. If a function is filled additionally, a Riemann
step function will be drawn.

Display functions or curves can intersect with other objects, and
points can be fixed on the function graph. Geometrically these
functions behave like a curve.

User defined functions of several variables cannot be plotted. Their
purpose is to be used in other expressions. Consequently, there is a
much simpler dialog for these functions, which can be called by
holding the __ctrl-key__ while pressing the function icon. One has to
declare all variables, separated by blanks, in this dialog. The
variables may then be used in the expression. There is only one
expression, of course. The function will display its definition,
unless it is hidden, of course. The display can be moved as usual.

.defaults
.related line angle colors
기본값 설정
(Default settings)

새로운 개체의 기본 색상, 모양, 다른 성질을 정할 수 있다. 
 - 개체의 색상
 - 개체 선의 두께
 - 점의 모양
 - 부분원
 - 부분선
 - 화살표
 - 이름 보이기
 - 값 보이기
 - 긴이름 사용하기
 - 크기와 굵은 글꼴
 - 180도 보다 큰각 사용
 - 개체를 불투명으로 만들기

기본값 설정은 메뉴와 아이콘을 이용할 수있다. 

You can set the __defaults__ for color and appearance and some other
properties of new objects.

 - color of objects
 - thickness of objects
 - style of points
 - partial circles
 - partial lines
 - segments as arrows
 - show name
 - show value
 - use long names
 - large and bold font
 - angles larger than 180 degrees
 - non-transparent objects

These default settings are available in the menu and as tool bar
icons.

.edit
.related mouse properties conditions
개체 편집하기
(Edit Objects)

이 도구는 하나 이상의 개체의 성질을 편집한다.
두 개 이상의 개체를 선택하려면 SHIFT 키를 누른다.
하나 이상의 개체에 대한 편집창은 공통적으로 적용할 수 있는 항목만 나타나고
바뀐 항목만 개체에 적용된다.

CTRL 키를 누른 상태에서 이 도구를 선택하면 가장 마지막으로 작도된 개체가 편집된다. 

참고 : 조건편집

//image- images/edit.png
This tool edits the properties of one or more objects. To select
several objects, hold the __Shift-key___. The edit dialog for more
than one objects has fields in an invalid state. Only the changed
fields will be used to update the objects.

If the __Ctrl-key__ is pressed when the tool is selected, the last
object will be edited.

-> See: Conditional formatting

.conditions
.related edit properties
조건편집
(Conditional Formatting)

CTRL 키를 누른상태에서 오른쪽 마우스버튼으로 개체를 선택하면 개체의 조건편집창이 열린다.
편집창에서 CTRL 키를 누른 상태에서 확인버튼을 눌러도 조건편집창이 열린다.
특별한 설정에서 '조건편집창 보이기'를 선택하면 편집창에 '조건편집'버튼이 보인다.

색, 두께, 기타 다른 속성을 설정할 수 있다.
이것은 특수한 효과는 주는데 유용하다.
0 이외의 값이 지정되면 속성이 반영된다.

특별한 조건은 '겹치는 순서'이다.
겹치는 순서의 값이 클 수록 뒤에 위치한다.
겹치는 순서 값을 가진 모든 개체는 가지지 않는 개체보다 뒤에 배경화면 보다 앞에 위치 한다.

여러 개체의 속성을 한번에 설정할 수 있다.
여러 개체를 선택하려면 개체편집 아이콘을 선택한 후 Shift 키를 누른상태에서 개체를 선택하고
마지막에 Ctrl 키를 누른 상태에서 선택된 개체 중에 하나를 마우스 왼쪽 버튼을 클릭하면 된다.
현재 개체를 뜻하는 "this"라는 변수를 사용할 수 있다.

If the __Ctrl-key__ is pressed, when an object is selected with the
right mouse button, an editor for the __conditional쬯ormating__ of
objects opens. The dialog is also accessible from the normal
__properties__ dialog by holding the __Ctrl-key__ for OK, or with a
separate button, if this option is enabled in the
__special쬼ettings__.

//image images/Conditions.jpg

For colors, thickness and other properties, it is possible to define
conditions to activate these properties. This is useful for special
effects. Each property can have a condition and it will be enabled
when this condition evaluates to true, which is any value other then
0.

A special condition is the z-buffer value. It determines the order
of painting. The objects with the largest z-buffer are painted first.
All objects that have a z-buffer value are painted after the background
objects, but before any other objects.

One can set the properties of several objects at once. The current
object can be referred to by the name "this".

.show
.related hide
선택된 색만 보이기
(Hide by Color)

특별한 색을 가진 개체를 보여주거나 감춘다.
이것은 작도를 더 분명하게 하는데 이용된다. 

//image- images/showcolor.png
Show or hide objects with specific colors. This is used to make the
construction clearer.

.grid
.related zoom move mouse
좌표축/격자
(Grid)

이 도구를 클릭할 때마다 좌표축, 좌표축+격자, 해제의 세가지 형태가 반복된다.
색과 두께, 폰트를  결정하는 창이 있다. (옵션-좌표축 편집)

좌표에서 새로운 점과 오른쪽마우스를 이용하여 옮겨진 점은 격자점으로 처리한다. 
반면 이미 정한 환경설정을 바꾸면서 이동도구와 왼쪽 마우스로 처리하는 것도 가능하다. 
격자를 가진 웹페이지에서 작도를 하는데 유용하다. 

작도가 저장될때 격자가 있다면 작도를 불러올때 바뀌게 될 것이다. 
작도환경은 작도파일에서 저장된다. 

//image- images/grid.png
This tool toggles the display of the coordinate system, the coordinate
system with axes, and no coordinate system. There is a dialog to set
the __color__ and __thickness__ of the coordinate system, and the
__font__ of the labels.

If the grid is on, new points and points moved by the right mouse
button __snap__ to grid points. However, it is possible to snap with
the move tool and the __left쬶ouse쬫utton__ instead, changing an
__special쬼etting__. This may be useful for constructions on Web pages
with grids.

If the grid is on while the construction is saved, it will be switched
on, when the construction is loaded. The grid settings are also saved
in the construction file.

.replay
.related htmlexport text animatebreak
작도과정 다시보기
(Walk through constructions)

이 도구는 앞, 뒤, 빨리 감기, 빨리 되감기 등의 움직임 버튼을 있는 작은 창을 연다.
중단점은 이 도구에서 설정할 수 있다. 다음 중단점으로 뛰어넘는 버튼이 있다.
중단점은 HTML에서 '작도과정 다시 보기'를 할 때 유용하다.

중단점을 숨기도록 하려면 중단점을 정하면서 shift키를 누른다.
중단점은 다음 중단점까지 이전의 모든 개체를 숨긴다. 작도를 몇 단계로 나눌 수 있게 한다. 

중단점과 중단점숨기기는 편집창에서도 설정 할 수도 있다. 

재생하는 동안 숨겨진 텍스트가 보여진다. 

//image- images/replay.png
This tool opens a small dialog with navigation buttons containing
buttons for forward, back, fast forward, fast rewind etc. Additionally,
__breakpoints__ can be set with this tool. There is a button to jump
to the next breakpoint. Moreover, breakpoints are important for HTML
export in replay style.

//image images/Replay.jpg

To set a __hiding쬫reakpoint__ hold the shift key while setting the
breakpoint. Hiding breakpoints hide all previous objects up to the
next previous breakpoint. The construction will be split into several
parts.

Breakpoints and hiding breakpoints can also be set in the properties
dialog.

During the replay, hidden texts will be visible.

.animatebreak
.related replay
중단점으로 움직이기
(Animate breakpoints)

이 도구는 자동적으로 중단점에서 중단점으로 움직인다. 속도를 높이거나 줄이기 위해서는 +키를 누른다. 

This tool automatically goes from breakpoint to breakpoint. To increase
or decrease the speed, press __Shift-key__ plus the right or left
__arrow&keys__.

.draw
.related mouse
마우스로 그리기
(Paint with the Mouse)

이 도구는 보여지는 색으로 마우스를 이용하여 보여지는 작도위에 도안을 색칠한다.
도안을 지우기 위해서는 ESC키를 누르거나 메뉴창을 이용한다. 도안은 작도로 저장될 것이다. 

//image- images/draw.png
This tool paints sketches above the current construction with the
mouse in the current __color__. To erase the sketch, press __Esc쬴ey__
or use the menu entry. The sketch will be saved with the
construction.

.zoom
.related mouse grid
마우스로 줌하기
(Zoom with the mouse)

이 도구로 작도영역밖으로 드래그함으로써 줌인, 줌아웃이 가능하고 작도영역안으로 드래그함으로써 작도를 움직이게 한다.

마우스조절로 작도의 줌이 가능하고 오른쪽 마우스 버튼, 비어있는 곳으로 드래그함으로써 작도를 이동하게 한다. 

+/-키로 줌이 가능하고 화살표키로 이동이 가능하다. 

실행되는 창은 작도파일로 저장되고 작도가 불러질때 똑같이 보여진다. 

//image- images/zoom.png
With this tool it is poosible to zoom in and out by dragging in the
outer region of the construction, and to move the construction by
dragging the inner region of the construction.

Note that it is possible to zoom the construction at any time with a
__mouse쭀heel__, and to move the construction with the
__right쬶ouse쬫utton__, dragging some empty spot.

One can also zoom with the __+/-쬴eys__, and move with the
__arrow쬴eys__.

The current viewing window is saved in the construction file, and the
same view will be used when the construction is loaded.

.parameter
.related runmacro parametertypes target macro
매크로 변수
(Macro Parameters)

매크로는 복잡한 작도에 중요한 도구이다. 
매크로가 없다면 단순한 작도만 실행될 것이다. 
매크로는 많은 작도 단계를 한단계로 모은다. 이것은 프로그래밍언어에서 서브루틴처럼 실행된다. 
매크로가 새로운 것이라면 사용자는 도구를 정의한다.


매크로는 변수 개체와 대상개체 모두 필요하다. 
예를들어 변수로 두개의 점을 잇는 선분과 대상으로 선분 모두 필요하다. 

Z.u.L.에서 매크로는 쉽게 정의된다. '패턴 작도'로 불려지는 작도의 일부인 매크로를 보여준다.
패턴을 만들기 위해 주어진 변수개체에서 시작해서 대상을 작도한다. 
예를 들어 두점에서 시작하는 두점사이의 수직이등분선을 작도할 수있다.  

매크로를 만드는 첫번째 단계에서 매크로는 시작점이 필요하다. 
다음단계에서 매크로 도구를 누르고 목표점을 정해야한다.
마지막 단계에서 매크로 창이 열리고 매크로 지정이 끝난다. 

계속하기: 목표점

//image- images/macro.png
__Macros__ are an important tool for more complicated constructions.
Without macros, only more or less simple constructions can be done.
Macros collect many constructions steps into one construction step.
They behave like subroutines in a programming language. Macros are
like new, user defined tools.

A macro needs parameter objects and target objects, just like the
segment tool takes two points as __parameters__ and has a segment as
its __target__.

Macros in Z.u.L. are easily defined. Show the macro, which part of
your construction it should learn. This part is called the "pattern
construction". To create the pattern, construct some targets starting
with some given parameter objects. E.g., you could construct the
middle perpendicular line of a segment between two points, starting
with the two points.

//image- images/macro1.png
In the first step of macro creation, the macro needs to learn your
starting points. In the next step, you press the macro tool once more
and define the targets. In the final step, the macro dialog appears
and the macro definition is finished.

Continue with: Targets

.target
.related parameter runmacro parametertypes macro
목표점
(Targets)

매크로변수가 선택된 후에 매크로 도구에서 목표점(만들 개체)을 선택한다. 
여기서는 매개변수에서 작도가능한 개체만이 보여진다. 
예를 들어 매개변수로 선택되어진 두점이 선택된다면 두 점사이의 수직이등분선이 보여진다.
모든 중간단계의 작도단계는 숨겨지지않는다면 보여진다.  

목표점을 선택한다. 예를 들어 수직이등분선을 선택한다. 

적어도 한개의 목표점 개체는 항상 지정되어야한다. 보여지는 모든 개체는 매크로에 의해 작도될 것이다. 
목표점은 매크로가 이용될 때 디폴트 색과 방식이 된다.
검은색 개체가 디폴트 색인경우를 제외하고 모든 개체는 지정된패턴으로 모양이 된다. 
특히 숨겨진 모든 개체는 숨겨진 상태에서 작도될 것이다. 
그렇지만 작도에서는 보여질 지라도 자동적으로 목표점이 없는 개체를 숨기는 옵션이 있다.   
매크로가 설명모드에서 이용되면 사용자는 목표개체에 대한 이름을 정해야한다. 

매크로도구에서 한번 더 클릭하면 대화창을 이용한 매크로 지정을 끝내게 된다. 

계속 : 매크로 지정

//image- images/macro2.png
After the macro parameters have been selected, another click on the
macro tool starts the selection of the __targets__. Here, only those
objects are __visible__ that are constructible from the parameters.
E.g., the middle perpendicular of two points is visible, if the two
points have been selected as parameters. All intermediate construction
steps are visible too unless they are hidden.

Select the targets now. In the example ment?ned above, select the
middle perpendicular line.

At least one target object should always be defined. Otherwise, all
visible objects will be constructed by the macro. Moreover, targets
will get the default __color__ and styles when the macro is used. All
other objects get the style in the definition pattern, with the
exception that black objects get the default color. Especially, all
__hidden__ objects will be constructed in the hidden state. However,
there is an option to hide all objects that are no targets
automatically, even if they were visible in the construction.
Moreover, if the macro is used in the descriptive mode, the user can
assign names only to target objects.

Another click on the macro tool finished the definition of the macro
using a dialog. 

Continue with: Macro Definition

.macro
.related runmacro parametertypes parameter target expression fixedcircle fixedangle hintparameters selfreference defaultmacros macroerror
매크로 지정
(Macro Definition)

모든 매개변수와 목표점이 선택된 후에 매크로 도구에서 한번더 클릭함으로써 대화창을 이용한 매크로 지정이 가능하다.

여기에서 매크로 이름과 주석을 정할 수있다. 
각 매개변수에서 사용자 경로를 지정하는 것이 가능하다. 
사용자가 매크로가 무엇을 하는지 필요한 것이 무엇인지 알지 못하기 때문에 주석과 사용자 경로는 중요하다.
매크로가 매개변수입력을 요구하는 동안 경로는 상태줄에서 보여준다. 


매개변수경로로 "=A"를 사용하여 매개변수를 A개체로 고정시키는 것이 가능하다. 
매개변수가 한개이고 올바른 형태라면 매개변수는 경로에 있지 않고 대신 개체 "A"가 이용될 것이다. 


현재의 개체를 복제하는 모든 개체를 숨기는 것이 디폴트로 지정되어있는데 여기서 바꿀수 있다. 

매크로가 실행될때 고정된 원, 고정된 각, 식에 대한 값이 필요할 수 있다. 
이것을 하기 위해서는 가장 아래줄에 원, 각, 식의 이름을 입력한다. 
사용자는 대화창을 열고 산술적인 식을 입력할수있다. 개체를 구별하는 콤마는 사용자에 의해 경로가 지정된다.  

참조 : 매개변수 암시하기

//image images/DefineMacro.jpg

After all __parameters__ and __targets__ have been selected, another
click on the macro tool defines the macro using a dialog. 

Here, the name of the macro and a __comment__ can be set. It is
possible to definie the user __prompts__ for each parameter. Comments
and user prompts are important, since the user might not know, what
the macro does and what it needs. The prompts are displayed in the
status line, while the macro waits for parameters.

It is possible to __fix쬪쬹arameter__ to an object A by using "=A" for
the parameter prompt. The parameter will not be prompted, but instead
an object "A" will be used, if there is one, and if it has the correct
type.

Be default, macros hide all objects that are __duplicates__ from
existing objects. This behaviour can be changed here.

Moreover, it is possible to ask the user for a value for either a
fixed circle, a fixed angle or an expression while the macro is
running (__value쬹rompt__). To do this, enter the name of the circle,
the angle or the expression into the box in the last line. The user
will be prompted with a dialog and can enter any arithmetic
expression. Several comma separated objects can be prompted from the
user.

-> See also: Hint Parameters, Self reference

.macrobar
.related macro
매크로 바
(The Macro Bar)

매크로 아이콘바가 사용될 수 있다. (매크로->매크로바)
또한 당신은 기본매크로 아이콘들을 보기를 원하면 프로그램에서 선택하면 된다.
애플릿에서도 옵션변수로 매크로바를 포함할 수 있다.

만약 매크로 이름의 끝에 괄호가 있는 매크로만 매크로 바에 표시된다.
괄호 안에 있는 이름의 아이콘을 "icons"라는 하위 폴더에서 불러 오려고 할 것이다.
만약 아이콘이 없으면 아이콘의 이름이 보여질 것이다.
아이콘들은 투명한 배경을 가진 32x32 크기의 PNG 파일이어야 하고
aliasing은 밝은회색으로 지정해야 한다.

프로그램은 다음의 유용한 아이콘을 포함하고 있다.

On request, a line for macro icons can be used. In the program, select
this line with a menu option. Also select, if you want to see the
default icons in that line. In applets, include the parameter
"macrobar" into the "options" parameter.

Macros are only displayed, if the macro name ends with a text in
brackets. The program and the applet will try to load an icon with
that name from a subdirectory named "icons". If no icon is found, the
text will displayed. Icons should be 32x32 in PNG with transparent
background, and the aliasing should be optimized for light gray.

The program archive contains the following useful icons.

//image- icons/1.png
1 - Middle Perpendicular

//image- icons/2.png
2 - Orthogonal Projection

//image- icons/3.png
3 - Inscribed Circle

//image- icons/4.png
4 - Circumcircle

//image- icons/5.png
5 - Reflection at a Line

//image- icons/6.png
6 - Reflection at a Circle

//image- icons/7.png
7 - Reflection at a Point

//image- icons/8.png
8 - Angle Bisector

//image- icons/9.png
9 - Angle Bisector as Ray

//image- icons/10.png
10 - Rotation, given 5 points

//image- icons/11.png
11 - Rotation, given an angle and 2 points

//image- icons/12.png
12 - Translation

//image- icons/13.png
13 - Point

//image- icons/14.png
14 - Angle

//image- icons/15.png
15 - Polygon

//image- icons/16.png
16 - Vector

//image- icons/17.png
17 - Point on a Line

//image- icons/18.png
18 - Arc

//image- icons/19.png
19 - Circle

//image- icons/20.png
20 - Circle, given three points

//image- icons/21.png
21 - Fixed Angle

//image- icons/22.png
22 - Fixed Circle

//image- icons/23.png
23 - Fixed Segment

//image- icons/24.png
24 - Function

//image- icons/25.png
25 - Axes

//image- icons/26.png
26 - Intersection

//image- icons/27.png
27 - Line

//image- icons/28.png
28 - Midpoint, given 2 points

//image- icons/29.png
29 - Parallel

//image- icons/30.png
30 - Conic Section

//image- icons/31.png
31 - Ray

//image- icons/32.png
32 - Line Segment

//image- icons/33.png
33 - Perpendicular

.hintparameters
.related macro
매개변수 암시하기
(Hint Parameters)

특수한 기능은 매개변수를 숨긴다. 
매크로 생성동안 숨겨진 점이 매크로 변수로 선택된다면 그리고 매크로가 사용될 때 매개변수를 선택하여 만들어진 점과 연결한다면 
매크로가 실행된 후에 새로운 점은 숨겨질 것이다. 

이 기능은 매개변수 암시하기로서 점을 사용할 수 있게 있다. 
예를들어 정삼각형을 만드는 매크로가 있다. 암시하기는 각 선분을 가리키는 세번의 클릭이다.
이경우 식은 "60*sign(180-a(P,A,B))"처럼 세점에서 60도 각 중의 하나를 이용해야한다.  

A special feature __hide__s parameters. If a hidden point is chosen as
a macro parameter during the generation of the macro, and if that
point is associated to a point generated during the parameter
selection when the macro is used, this new point will be hidden after
the macro has been run. 

This feature makes it possible to use points as __hint쬹arameters__.
An example would be a macro, which generates an equilateral triangle
on a segment. The hint would be a third click indicating either side
of the segment. In this case, an expression must be used for one of
the 60 degree angles involving the third point, something like
"60*sign(180-a(P,A,B))".

.selectmacro
.related runmacro macro
매크로 선택창
(The Macro Selection Dialog)

매크로 선택창은 모든 매크로의 목록을 가지고 있다. 
매크로는 하위메뉴로 정렬되어있다. 
하위메뉴를 바꾸기 위해서는 해당매크로를 더블클릭한다. 
상위디렉토리로 돌아가기위해서는 ".."을 더블클릭한다. 
매크로를 하위디렉토리에 놓기 위해서는 "subdir/macroname"처럼 이름을 정한다. 
디폴트 매크로는 붉은색으로 나타난다. 

창에서 여러개 선택하도록 한다면 하위디렉토리가 선택될수있다.
이경우 하위디렉토리에 있는 모든 매크로는 한번에 선택될수있을것이다. 

//image images/MacroSelection.jpg

The macro selection dialog contains a list of all __macros__. Macros
may be organized in __macro쬯olders__. To switch to a folder, double
click on it. To revert to the parent directory, double click on "..".
To put the macro into a subfolder, rename it like
"subdir/macroname". __Default쬶acros__ are displayed in red.

If the dialog allows multiple selections, subdirectories can be selected.
In this case, all macros in all subdirectories of this subdirectory will
be selected at once.

.runmacro
.related parameter parametertypes mouse expressionsyntax fixparameters selectmacro
매크로 실행하기
(Running a Macro)

매크로 실행도구가 선택될때 SHIFT키를 누른다면 이전에 사용돈 매크로가 자동적으로 선택되어질 것이다. 
매크로 실행도구만 선택할때 한개 이상의 매크로가 있다면 매크로 선택창이 열린다. 
사용자가 매크로를 선택하면 프로그램은 각 매개변수에 경로를 줄것이다. 예상되는 매크로 유형과 경로가 상태줄에 표시된다. 

매크로는 오른쪽 마우스 버튼에 의해서도 선택될수 있다. 
팝업메뉴에 있는 목록에서 매크로를 선택한다. 

"스페이스바는 선택하다..."가 선택줄에 보여진다면 스페이스바를 누름으로써 변수개체가 선택될 수 있다.
매크로를 여러번 사용한다면 이기능은 유용하다.   

매크로는 마지막에 실행된다. 
매크로가 고정된 원이나 각에 값이 필요하다면 대화창에 이 값에 대한 입력란이 있을것이다. 
사용자는 그곳에 대수식을 넣을 수 있다. 

미리보기를 하면 마지막 매개변수 점이 선택되기 전에 매크로 결과를 볼수있다. 

참조 : 매크로 선택창, 매크로 정의

//image- images/runmacro.png
If the __Shift-key__ is pressed when the macro run tool is selected,
the previously used macro will be selected automatically. If not,
and there is more than one macro, the macro selection dialog will
open. After the user has chosen a macro, the program will __prompt__
for each parameter, and the expected object type and the prompt will
be displayed in the __status쬵ine__.

Macros can also be selected with the __right쬶ouse쬫utton__. Choose
the macro from the list in the popup menu.

If "Space selects ..." appears in the status line, this parameter
object can be selected by pressing the __space쬴ey__. This feature is
useful, if the macro is used several times.

At the end, the macro will be executed. If the macro needs a value for
a fixed circle or angle (__value쬹rompt__), it will prompt for this
value with a dialog box. The user can enter any arithmetic expression
here.

If the full __preview__ is turned on, the result of the macro
operation can be seen before the last parameter point is selected.

-> See: Macro Selection Dialog, Macro Definition

.defaultmacros
.related runmacro save
기본 매크로
(Default Macros)

시작하면 C.a.R.은 시작디렉토리에서 ".default.mcr"파일을 찾는다. 
파일이 있다면 이 파일을 불러올때 매크로가 포함된다. 
다른 파일을 찾지 못하면 이미 사용된 디폴트 매크로 파일을 불러온다.  

디폴트 매크로는 안전장치를 가진다. 새로운 파일을 불러올때 매크로는 삭제되지 않고 작도로 저장되지 않는다.
매크로를 삭제하려면 매크로 메뉴에서 메뉴를 사용하여 모든 매크로를 선택한다,


디폴트 매크로를 만들수도 있다. 
시작디렉토리에 ".default.mcr"파일을 저장한다. 
다른언어버전이 필요하다면 ".la_default.mcr" 파일로 저장하는데 여기서 "la"는 다른 언어이다.
이것은 단순히 ".default.mcr"에 덧쓰게 된다. 
다른 언어는 "about"창에서 볼수있다. 

When starting, C.a.R. looks for a file named ".default.mcr" in the
current directory. If there is such a file, the macros contained in
this file are loaded as __default쬶acros__. Note, that there is a a
default macro file in the program archive, which is used, if the
program does not find another file.

The default macros are protected. They are not deleted when a new
file is loaded and they are not saved with constructions. To delete
protected macros, use the menu entry in the macro menu, and select all
macros. 

You can create default macros yourself. Simply save a file
".default.mcr" into the current directory. If you need a special
language version, save the file as ".la_default.mcr", where "la"
is your language shortcut, of simply overwrite ".default.mcr". the
language shortcut can be found in the "about" dialog (__languages__).

.macroerror
.related macro
경고: 개체로 사용되지만 매크로에 사용할 수 없다.. 
(Warning: "Object is used, but not in Macro")

매크로 개체가 매크로 아닌 개체를 가리킨다면 이 경고가 나타난다.
조건부로 포맷되는 개체일지라도 보통 식에서 @...로 보여지는 이유이다.  
이말은 조건부로 포맷되는 개체에 의존하는 개체를 만들지는 않고 여전히 작도가능하다.
그러나 기대했던 작업은 아닐지라도 사용될때 잘못된 개체를 말할수 있다.  

또다른 방식으로는 원호의 범위에서 나타난다.
범위가 원에 달려있기 때문에 원호는 둥근영역에서 벗어나기 위해 경계를 의존할수없다.
경고를 무시한다면 호는 같은 이름의 개체에 의해 결정된다.    

세번째 이유는 원의 겹침에서 나타날수있다. 겹침을 선택하려면 겹침은 주어진 점과는 다르다.
다른 겹침이 이미 존재한다면 자동적으로 일어날수있다.
경고를 무시한다면 이겹침이 같은이름을 가진 점과는 다르게 일어날수 있거나 제한없이 겹침이 일어난다. 
경고를 피하려면 놓친 개체를 매개변수에 더하고 매크로에 포함시킨다. 

This warning occurs if an object in the macro refers to an object not
contained in the macro. Usually, the reason is a __@...__ reference in
an expression, maybe in the conditional formatting of objects. Those
references do not make objects depend on the referred object, and thus
the objects are still constructable. However, they might not work as
expected, or might even refer to wrong objects when used.

Another type of references are the bounds of __arcs__. Since those
bounds depend on the circle most of the time, the circle arc cannot
depend on the bounds to avoid circular dependencies. If you ignore the
warning, the arc will be determined by objects with the same name.

A third reason may be the __intersections__ with circles. To choose the
intersection, the intersection may be kept __away쬯rom__ a given
point. This might happen automatically, if the other intersection
already exists. If you ignore the warning, this intersection will be
kept away from a point with the same name, or will become an
unrestricted intersection.

To avoid the warning, add the missing object to the parameters, so that
it is included in the macro.

.localize
.related defaultmacros
국지적 도움
(Localized Help)

C.a.R은 이미 많은 언어로 사용되고 있다. 그러나 당신이 당신 나라 언어로 사용하고 싶다면 다음을 번역해야한다.

 - ZirkelProperties.properties
 - info.txt

속성파일(properties file)은 native2ascii라고 이름 지어진 도구에 의하여 표현되는 내부의 유니코드(internal Unicode)로 변역될 필요가 있다.
당신의 번역물을 나에게 보내면 현재 통용되는 자료에 포함시킬 것이다. 
그 도움 파일은 너의 local encoding에 있을 것이다.


C.a.R. already runs in many __languages__. However, if you want to
provide your own version, you should translate

 - ZirkelProperties.properties
 - info.txt

The __properties__ file needs to be translated into an internal
Unicode representation by a tool named "native2ascii". It is wise to
let me do that for you. Simply send me the file. I will also include
your translation into the current distribution.

The help file should be in your local __encoding__. But is is possible
to specify any encoding in the properties file.

.fixparameters
.related runmacro parameter
고정 변수들
(Fixed Parameters)

선택하는 동안 SHIFT 키를 누름에 의하여 매크로 변수의 선택을 고정할 수 있다.
이것은 이 변수들에 고정되어진 매크로의 복사물을 만들 것이다.
당연히 모든 변수를 고정할 수는 없다.

매크로가 정의되는 동안 변수들이 고정될 수 있다. 매크로정의창의 Parameter Prompts의 변수이름 앞에 =을 붙이면 그 개체는 고정된다. (이후 이 매크로를 이용할 때 고정된 변수이름 이외에 변수개체를 설정하면 곧장 실행된다)

You can also fix the selection of macro __parameters__ by pressing the
__Shift-key__ during the selection. This will create a copy of the
macro, which is fixed in these parameters. You cannot fix all
parameters of course.

A parameter can be fixed, while the macro is defined. To do that,
"=A" is used as the prompt of the parameter. The parameter
will then be fixed to the object with name "A".

.parametertypes
.related parameter
변수들의 형태
(Types of Parameters)

매크로는 단순히 변수로서 점을 사용할 것이다.
이렇게 만들어진 개체들은 더 쉽게 이해할 수 있고 많은 문제점들을 피한다.
그러나 다른 형태의 변수들도 가능하다.

직선, 반직선, 선분들 그리고 원들도 변수가 될 수 있다. 
즉, 각각으로 두 끝점 또는 중심. 이것들은 매크로 사용법을 쉽게 하지만
직선, 반직선, 선분, 원등은 여러 문제점이 있다.
만약 선분 이어진 두 선분 AB와 BC가 매크로 변수이면 
사용자는 연결되어진 두 선분 EF와 FG를 선택해야만 한다.
(예를 들면, 삼각형의 외심을 매크로로 작도할 때. 
세 꼭지점을 변수를 하는 것이 선분을 변수로 하는 것보다 사용하기 쉽다.)

직선과 반직선은 두 개의 정해진 점들과 하나의 정해진 점(e.g.,평행선들)으로 
이루어진 두가지 타입이다. 
만약 그들의 정해진 점들이 원하는 작도물에서 사용되지 않거나 
오직 하나의 정해진 점을 갖는다면, 
직선, 반직선 그리고 선분들의 매크로에서 끝이 없는 선으로 기억되어진다. 
그러면 사용자는 변수로써 한 선을 선택할 수 있다. 
만약 두 개의 정해진 점들 중 하나를 사용하면
사용자는 같은 타입의 한 직선, 반직선 또는 선분을 선택해야만 할 것이다. 
다시금 이것은 복잡하다. 그리고 점들을 사용하는 최선일 것이다.

Macro should use __points__ as __parameters__. This makes dependencies
easier to understand and avoids many problems. But other types of
parameters are possible too.

Lines, rays, segments, and circles generate __secondary쬹arameters__,
namely the two end points, or the center respectively. This simplifies
macro usage. However, the user must take care to use these parameters
in the same configuration. Two concentric circles must be concentric.
If the segments AB and BC are macro parameters, then the user must
choose segments EF and FG. In these cases, it might be better to use
points as parameters.

Lines and rays are of two types: with two defining points, and with
one defining point (e.g., parallel lines). In the macro, lines, rays,
and segments are stored as pointless lines, if their defining points
are not used in the target construction, or if they have only one
defining point. The user can then choose any line as a parameter. If
one of the two defining points is used, the user will have to choose a
line, ray or segment of the same type. Again, this is complicated, and
it may be best to use points.

.htmlexport
.related runningdemo save comment exportdialog jobexport
HTML내보내기
(HTML Export)

C.a.R.은 당신의 작도물에 대하여 HTML페이지를 만들 수 있다. 이 HTML 페이지들은 작도물을 보여주는 애플릿을 포함한다. 이 HTML내보내기 대화창에서 그 페이지의 모습과 애플릿의 설정을 정할 수 있다.

HTML페이지를 설정하기 위해서 작도 파일을 만들어야만 하고 
해답 페이지를 필요한 과제파일에 대해서는 또 다른 해답 페이지를 만들어야 한다.

 - the HTML page just generated, 
 - a solution page, if present,
 - style sheets, if present, 
 - the applet archive zirkel.jar,
 - the construction file. 

작도물에 자취와 애니메이션이 있으면 같이 저장된다. 
자취 또는 애니메이션은 애플릿에서 자동적으로 나타난다. 
이 경우에 거기에서 상호작용하는 사용자가 없다. 
그래서 사용자는 여백에 클릭하여 멈출 수 있다.

만약 자취들이 작도물들이 저장될 때 보여 진다면 자동적으로 보여진다는 것을 주목해라.

그것은 각 HTML페이지위에 하나의 애플릿을 갖기 위하여 최상이다.

참고 :  HTML 내보내기 대화창

C.a.R. can generate __HTML__ pages for your constructions. These HTML
pages contain an __applet__ that displays the construction. In the
dialog for HTML export the appearance of the page and the applet can
be set.

To set up a HTML page, a construction file has to be created, and,
for assignments with solution pages, another one for the solution.
One needs to publish

 - the HTML page just generated, 
 - a solution page, if present,
 - style sheets, if present, 
 - the applet archive zirkel.jar,
 - the construction file. 

Note that __tracks__ and __animations__ are saved with the
construction. They will automatically reload in constructions, which
are displayed in applets. In this case, there is no user interaction.
So you should use the plain or border style for these applets.

It is best to have only one applet on each HTML page.

-> See also: HTML Export dialg.

.htmlexporttemplate
.related htmlexport save comment settings
템플릿으로 HTML내보내기
(HTML Export with Templates)

이것은 HTML을 만들기 위한 편한 방법이다. 이 프로그램은 HTML을 위한 템플릿(준비된 틀)을 불러오고 템플릿에 필요한 정보들을 가득 채운다. 그 대화창은 많은 정보(애플릿 크기, 색, 스타일, 저장위치 등)가 템플릿 파일에 포함되기에 너무 부족하다. 

C.a.R는 시작하기 위한 약간의 템플릿을 가지고 있다.
템플릿 파일은 확장자 "*.template"을 사용하고 있다. 당신은 이 템플릿파일들을 편집할 수 있다. 외국인 사용자들은 컴퓨터 환경에서 UTF-8를 사용하지 않게 하거나 UTF를 적당히 다룰 수 있는 에디터를 사용해야만 한다. 당신은 기존의 템플릿 파일들 위에 당신의 템플릿을 형성할 수 있다.

다음의 정보들(placeholders)은 템플릿 파일안에서 인식된다.

#title
내보내기 대화창에서 보여진 작도물 제목으로 바꾼다.

#comment1,#comment2,...
 이것은 유사한 숫자로 이루어진 작도물 주석(코멘트)의 장으로 바꿀 것이다. 코멘트는 "~"으로 이루어진 선들에 의해 분리되어진다. 각 주석(코멘트)창의 단락은 <p>...</p>에 의하여 묶여질 것이다.

#comment
사용자들은 텍스트를 좋아하지만 주석(코멘트)를 찾지 않는다.

#text1,#text2,...
사용자들은 #comment1,... 을 좋아하지만 단락<p>...</p>을 만들지 않는다. 사용자들은 그가 좋아하는 어떤 HTML-tag들을 줄 수 있다.

#text
사용자들은 #text1,... 을 좋아하지만 주석(코멘트)창을 찾지 않는다.

#parameter
애플릿 변수를 끼워 넣음: 파일, job, style, tools 그 외 옵션들.

#color
색을 위한 애플릿 변수를 끼워 넣음

#font
글씨와 소숫점을 위한 애플릿 변수를 끼워 넣음

#codebase
내보내기 대화창으로 부터의 코드베이스

여기에 매우 단순한 템플릿 파일이 있다.

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
  <HTML>
  <HEAD>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8">
  <TITLE>
  #title
  </TITLE>
  </HEAD>
  <BODY BGCOLOR=#F0F0F0>
  <H1>
  #title
  </H1>
  <CENTER>
 
  <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
  <HTML>
  <HEAD>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8">
  <TITLE>
  #title
  </TITLE>
  </HEAD>
  <BODY BGCOLOR=#F0F0F0>
  <H1>
  #title
  </H1>
  <CENTER>

참조: 내보내기 대화창

__Templates__ are a comfortable way to export your construction to
__HTML__. The program loads a template for the HTML page, and fills in
the necessary information replacing all placeholders on the template
page. The dialog is much shorter, since most information is
continained in the template file, including __applet__ size, applet
and page colors, style sheets and archive position.

The __documentation__ of C.a.R. contains some templates to start with.
Template files use the extension "*.template". You can edit these
template files with any file or HTML editor. Foreign language users
should disable __UTF-8__ in the settings dialog, or they must use an
editor, capable of handling UTF properly (e.g my text editor JE, the
HTML editors of Mozilla, or Frontpage by MS, and many others). You can
base your template on the template files that come with the
documentation.

The following placeholders are recognized in template files.

#title
  Replaced by the construction title as shown in the export dialog.

#comment1,#comment2,...
  This will be replaced by the section of the construction comment
with the corresponding number. Comment sections are separated by lines
consisting of "~". Each paragraph of the comment section will be
bracketed by <p>...</p>.

#comment
  Works like text, but does not look for comment sections.

#text1,#text2,...
  Works like #comment1,... but does not generate paragraphs
<p>...</p>. The user can provide any HTML-tags he likes.

#text
  Works like #text1,... but does not look for comment sections.

#parameter
  Inserts the applet parameters: file or job, style, tools and options.

#color
  Inserts the applet parameters for colors.

#font
  Inserts the applet parameter for fonts and digits.

#codebase
  The codebase from the export dialog.

Here is a very simple template file.

  <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
  <HTML>
  <HEAD>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8">
  <TITLE>
  #title
  </TITLE>
  </HEAD>
  <BODY BGCOLOR=#F0F0F0>
  <H1>
  #title
  </H1>
  <CENTER>
  <P>
  <APPLET CODE="rene.zirkel.ZirkelApplet.class" #codebase WIDTH="400" 
  HEIGHT="400" ALIGN="CENTER">
  <PARAM NAME="color" VALUE="240,240,240">
  #parameter
  </APPLET>
  </P>
  </CENTER>
  #comment
  </BODY>
  </HTML>

-> See also: Export Dialog

.exportdialog
.related htmlexport jobexport
내보내기 대화창
(Export Dialog)

애플릿은 몇 개의 유형을 가질 수 있다.

- Plain(꾸밈없이): 애플릿에 테두리가 없고 사용자에게 오직 숨겨진 것과 움직이는 점들을 보여줄 수 있다. 이 경우에 페이지와 애플릿에 같은 색을 사용할 수 있다.

- Border(테두리): 애플릿에 테두리가 있다.

- Border and Icons(테두리와 아이콘): 애플릿에 테두리와 아이콘이 있게 되므로 사용자는 여러 가지 것들을 작도할 수 있다.

- Border, Icons and Status(테두리, 아이콘과 상태바): 애플릿은 상태라인을 가진다. 상태에 대한 글이 브라우저 상태 라인에서 보여진다. 

- Border, Icons and Input Line(테두리, 아이콘과 명령 입력줄): 작도물들은 명령어입력 방식에서 만들어져야만 한다. 

- Replay with Breakpoints(작도과정보기, 중단점): 세 개의 버튼들은 단계별(중단점에서 중단점) 움직임을 보여준다. 중단점들을 설정하기 위하여 작도과정 보기 도구를 사용한다.

페이지의 제목: 이것은 <H1> 유형에서의 페이지의 제목이다.

CSS 유형 파일: 층계형 시트는 몇 개의 페이지를 공통의 유형으로 하는 데에 유용한다. 만약 그것들을 사용하지 않는다면, 공란으로 두어라.  프로그램 보관파일(archive)과 관계가 있는 경로를 사용하여라.

너비, 높이: 애플릿의 크기

참조: 내보내기 대화창

작도 파일: 작도물을 포함하는 파일의 경로는 HTML파일과 같은 디렉토리안에 있다. 그러나 파일 경로는 프로그램 보관파일(archive)과 관계가 있어야 있고 절대URL와 경로는 여기에서 허락되지 않는다.

Jar 파일: 이것은 프로그램 보관파일(archive)이다. 경로는 HTML page와 관계가 있어야만 한다.

색: 페이지 배경과 애플릿 배경을 위하여 색을 선정한다.. 색은 아래의 '배경색 선택' 버튼으로 선택되어진다.

게다가, 작도 요소들과 배경을 위하여 정해진 색들을 저장하기위한 추가선택들이 있다. 작도물의 배경은 애플릿의 배경과 페이지의 배경으로부터 다를 수 있다.

소숫점 저장: 소숫점 저장이 가능하다.

주석 보여주기: 이곳은 애플릿 아래에 설명을 붙일 것이다. 모든 브라우저들은 UTF-8 encoding 하지 않음으로 실행할 수 있다. 만약 특별한 설정에서 윈도우 엔코딩을 선택하지 않더라도.

도구들: 이 두 아이콘 바는 당신이 사용자를 위하여 보여지게 하는 도구를 선택할 수 있게 한다. 어떤 경우에도 원래상태의 도구들로 돌릴 수 있고 이를 통하여 HTML페이지에서 사용자는 특별한 아이콘을 갖는 두 라인을 얻는다.

만약 당신이 사용자에게 매크로 도구를 주면 사용자는 오직 정해진 매크로를 할 수 있고 주어진 매크로를 실행할 수 있다. 

물음표 표시를 갖고 있는 아이콘은 개체위의 점과 교점을 만들것인지, 개체 선택 대화창을 보이게 할 것인지를 묻게 하는 것들이다. 초기상태에는 이러한 대화창이나 물음들은 사용하지 않는다.

명령어입력 방식에서, 아이콘은 사용자가 규칙을 찾는 데 도와준다. 이 모드에서도 모든 작도도구들은 사용된다.

//image images/Export.jpg

Applets can have several styles.

- Plain: The __applet__ has no border. The user can only display
hidden elements and move points. One should use the same color for the
page and the applet in this case. 

- Border: The applet gets a border. 

- Border and Icons: The applet gets a border and icons. The user can
construct things. 

- Border, Icons and Status: The applet gets a status line. The status
text is displayed in the browser status line too. 

- Border, Icons and Input Line: The construction must be done in
descriptive (non-visual) mode. 

- Replay with Breakpoints: Three buttons are displayed to enable
navigation from breakpoint to breakpoint. To set the breakpoints, use
the replay tool. 

Title of Page: This is the title of your page in <H1> style.

CSS Style-Files: Cascading Style Sheets are useful to give several
pages a common appearance. If you do not use them, leave the input
empty. Use a path relative to the program archive.

Width, Height: The dimensions of the applet display.

Construction File: The name of the file containing the construction,
usually in the same directory as the HTML file. However, the file
names must be relative to the program archive. Absolute URLs and paths
are not allowed here.

Jar File: This is the program archive. The path must be relative to
the HTML page.

Colors: You can choose a color for the page background and for the
applet background. The color can be chosen with the button below.

Moreover, there are switches to save the defined colors for the
construction elements and for the construction background. The
background of the construction can be different from the background of
the applet and the background of the page.

Save Digits: Will save the settings for the number of digits. Should
be enabled.

Show Comment: This will put the __comment__ below the applet. All
browsers should be able to handle the default __UTF-8__ encoding. If
not switch to the Windows encoding in the special settings.

Tools: These two icon bars let you choose the __tools__, which should
be displayed to the user. In any case, one should provide the undo
tool. With the special icon for two lines the user gets two lines of
tools.

The user can only define macros, if you give him the macro tool. And
he can run only macros only, if this tool is available.

The icons with the question mark are switches for the object selection
dialog, the question for points on objects and for intersections.
By default, all these dialogs and questions are turned off in applets.

In the non-__visual쬶ode__, the icons help the user to find the
syntax. In this mode, all construction tools work.

.jobexport
.related htmlexport exportdialog
과제 내보내기
(Export Assignments)
 
과제 보이기: 과제로써 작도물을 저장하기 위하여 체크를 해야 한다.

해답 파일-이동-저장-연결: 이 설정들은 해결페이지의 자동적 생성을 가능하게 한다. 
사용자가 과제를 끝난 후 브라우서는 정확하게 해결페이지로 갈수 있게 한다. 또한 작도물 아래 이 페이지로의 링크를 설정할 수 있다.

주석 : 당연히 과제 주석을 내보내기. 작도 주석은 오직 해결페이지에서 보여진다.

The export dialog has some additional features for __assignments__.

Display as Assignment: Needs to be checked to save the
construction as an assignment.

Solution File - Jump - Save - Link: These settings allow the automatic
generation of a solution page, which is a separate page to display the
solution. After the user finishes the assignment, the browser can jump
directly to the solution page. One can also set a link to this page
below the construction.

Comment: Exports the assignment comment, of course. The construction
comment is only shown on the solution page.

.runningdemo
.related htmlexport online
움직이는 데모 만들기
(Creating a running demo)

이것은 일련의 작도물이 로드된 애플릿을 가능하게 하고 그것들을 사용자에게 주어진 비율로 보여준다. 
애플릿 규칙은 완전히 다르고 거기에는 자동적인 내보내기가 없다.

애플릿 코드의 한 예가 다음과 같이 있다.

 <APPLET ARCHIVE="zirkel.jar" CODE="rene.zirkel.ZirkelApplet.class" 
       WIDTH="500" HEIGHT="565" ALIGN="center">
 <PARAM NAME="demo" VALUE="demo.xml">
 <PARAM NAME="color" VALUE="244,244,242">
 </APPLET>

"demo.xml"파일은 파일목록을 포함한다.
그것은 똑바른 규칙이나 표현을 가지고 있다.
여기에 예제가 있다.

 <?xml version="1.0" encoding="utf-8"?>
 <Demo delay="30">
 <File name="Uhr.zir" delay="20">Clockwork</File>
 <File name="Cindarella-Maschine.zir">Cindarella machine</File>
   ...
 </Demo>

초단위로 지연시키는 변수가 사용된다.

It is possible to create an __applet__ to load a series of
constructions and display them to the user at a given rate
(__demo쬼how__). The applet syntax is quite different and there is no
automatic export.

An example of the applet code looks like this.

 <APPLET ARCHIVE="zirkel.jar" CODE="rene.zirkel.ZirkelApplet.class" 
       WIDTH="500" HEIGHT="565" ALIGN="center">
 <PARAM NAME="demo" VALUE="demo.xml">
 <PARAM NAME="color" VALUE="244,244,242">
 </APPLET>

The file "demo.xml" contains the file list. It is an XML file with a
straightforward syntax. Here is a sample.

 <?xml version="1.0" encoding="utf-8"?>
 <Demo delay="30">
 <File name="Uhr.zir" delay="20">Clockwork</File>
 <File name="Cindarella-Maschine.zir">Cindarella machine</File>
   ...
 </Demo>

The delay parameters are in seconds.

.visual
.related expressionsyntax descriptivefiles runmacro
명령어입력 방식 작도
(Descriptive Constructions)

이 모드는 작도창 아래부분에 입력라인이 있다. 다음은  적용방법이다.

 - 선택된 도구는 오직 한 입력방식을 보여 줄 것이다. 
 - 필요한 작도변수들은 이름으로 제공되어야만 한다. 
 - 작도되어진 개체 이름은 등호 = 표시 왼쪽에 주어질 것이다.
 - 작도는 엔터키를 눌러 실행되어 진다

입력을 위한 약속된 규칙이 있다.

 개체이름=함수(변수...)
 개체이름1,2=함수(변수...)

둘째 줄은 몇 개의 대상으로 이루어진 교점과 매크로에 적용한다.

만약 이름이 누락되면, 새로운 개체는 초기의 이름을 나타낼 것이다.

여기 짧은 명령어입력 방식 작도법이 있다. 그 표현들은 값이 예상되어진 모든 장소에서 사용될 것이다. 빈 괄호가 생략될 수도 있다.

규칙
 Long 
 설명(DEscription)
 
A=P() 
 점
 임의의 장소에서 점을 찍는다.  

A=P(0,1) 
 A는 좌표가(0,1)인 고정된 점
 
a=s(B,C) 
 선분
 B로부터 C로 이어진 선분 
 
a=s(B,2) 
 점B로부터 거리가 2로 고정된 선분(수평방향으로 +2만큼)
 
a=l(B,C) 
 직선
 B와 C를 지나는 직선
 
a=r(B,C) 
 반직선
 B로부터 C로 향하는 반직선

k=c(A,B) 
 원 (circle)
 점B를 지나고 중심이 A인 원
 
k=c(A,2) 
 고정된 반지름 2를 가진 원
 
k=c(A,B,C) 
 BC를 반지름으로 하고 중심이 A인 원
 
A=I(g,g) 
 교점
 두 직선 사이의 교점
 
A,B=I(k,k) 
 원끼리 또는 원과 직선들 사이의 교점들
 
away(A,P) 
 멀리
 교점A를 점P로부터 먼 곳에 정하기(예를 들면 원과 점P1,P2을 이은 직선의 교점을 A, B라고 할 때. 
away(A,P1)이라 명령입력줄에 쓰면 점A의 위치가 점P1에서 먼 쪽으로 변경된다.)
 
M=M(A,B) 
 중점
 AB의 중점
 
g=pl(g,A) 
 평행선
 점A를 지나고 직선g와 평행선
 
g=p(g,A) 
 수직
 점A를 지나고 직선g와 수직
 
a=a(A,B,C) 
 각
 각A,B,C
  
a=a(A,B,90) 
 점A에서 점B를 꼭지점으로 한 각의 크기가 90도인 각
 
A=poly(P1,P2,P3) 
 다각형
 점P1,P2,P3을 꼭지점으로 하는 다각형

Q=quadric(P1,P2,P3,P4,P5)
 이 점들을 지나는 원추곡선 

F=function(a,b,d,t,xt,yt)
 변수 t에 관한 식을 가진 좌표(t의 x좌표, t의 y좌표)와 간격 d, a에서 b까지의 함수를 생성

value(P,0,1) 
 값
 임의의 곳에 있는 점P을 (0,1)좌표로 이동고정
 
value(s,2) 
임의의 선분s의 길이를 2로 변경 고정
 
value(k,2) 
 임의의 원k의 반지름을 2로 변경 고정
 
value(w,90) 
 임의의 각 w를 90도로 변경 고정
 
value(true,o) 
 개체 o의 값을 보이게 설정
 
value(o) 
 개체o의 값을 보이게 설정
 
value(true) 
 초기설정을 개체의 값이 보이게 함
 
name(o,p) 
 이름
 o의 이름을 p로 변경 설정
 
name(true,o) 
 개체 o의 이름을 보이게 설정
 
name(o) 
 개체 o의 이름을 보이게 설정
 
name(true) 
 초기설정을 이름 보이게 함
  
hide(true,o) 
 숨김
 개체 o를 숨기거나-hide(true,o) 숨기지 않음-hide(false,o) 
 
hide(o) 
 개체o를 숨김
 
hide(true) 
 초기설정을 숨김상태로 함
 
col(green,o) 
 색
 개체 o의 색을 초록으로 설정
 
col(green) 
 초기설정을 초록으로 함
 
th(thick 또는 normal 또는 thin ,o) 
 두께
 개체 o의 두께를 두껍게 또는 보통, 또는 얇게 함
 
th(thick) 
 초기설정을 두껍게로 함
 
type(square 또는 circle 또는 diamond 또는 point,P) 
 모양
 점의 모양을 네모 또는 원 또는 다이어몬드 또는 점으로 설정 
 
type(square) 
 점의 초기설정을 네모로 함
 
part(k) 
part(true,k) 
 부분
 개체 k를 부분호보기 또는 완전보기 part(false,k)로 설정
 
part(true) 
 초기설정을 부분호로 설정
 
fill(o) 
fill(true,o) 
 채우기
 개체 o를 채우기 상태 또는 테두리상태로 설정 

back(o) 
back(true,o) 
 배경
 개체 o를 배경 또는 아니게 설정
 
window(0,0,5) 
 창
 창의 중심좌표를 (0,0)으로 하고 너비를 2*5로 함 

valid(o)
valid(true,o)
 선분과 반직선을 교선과 수선에서의 선으로 다루기. o는 교선 또는 수선 <-잘 안됨

obtuse(a)
obtuse(true,a)
 각 a를 둔각으로 설정<-기존의 각을 둔각으로 설정이 되나 표시가 나지 않음

solid(a)
solid(true,a)
 개체 a를 불투명으로 설정

restrict(c,A,B)
 A로부터 B까지의 호가 되게 원 제한 

valid(o)
valid(true,o)
 수선과 공통부분으로부터 제한을 없앤다. 이 개체는 공통부분이 선분이나 호 밖에 있을 지라도 효과적이다.

rename(A,B)
 개체 A를 B로 새이름 정하기
 
매크로에서도 사용될 수 있다. =의 왼쪽에 있는 이름은 대상에 적용될 것이다.
만약 몇 개의 대상이 있으면 그 이름은 콤마에 의하여 분리되어야 한다.
덧붙인 변수는 대화식 모드에서 prompt되는 개체의 값을 정하는 데 사용될 수 있다.

In this non-__visual쬶ode__, there is an input line below the
construction. The following differences apply.

 - Choosing a tool will only display an input pattern. 
 - The necessary construction parameters must be supplied by name. 
 - The name of the constructed object may be given left of an equality sign =.
 - The construction is carried out be pressing Return. 

There is a fixed __syntax__ for the input.

 name=function(parameter,...)
 name1,name2=function(parameter,...)

The second line applies to intersection and macros with several
targets.

If the name is missing, the new object will get the default name. 

Here is a short Description of the syntax. Note, that __expressions__
may be used in all places, where a value is expected. Empty brackets
can be omitted.

Syntax 
 Long 
 DEscription 
 
A=P() 
 point 
 Generates a point at random position. 
 
A=P(0,1) 
  A fixed point. 
 
a=s(B,C) 
 segment 
 A segment from B to C. 
 
a=s(B,2) 
  A segment of fixed length. 
 
a=g(B,C) 
 line 
 A line through B and C. 
 
a=r(B,C) 
 ray 
 A ray from B to C. 
 
k=k(A,B) 
 circle 
 A circle around A trough B. 
 
k=k(A,2) 
  A circle with fixed radius. 
 
k=k(A,B,C) 
  A circle around A with radius BC. 
 
A=S(g,g) 
 intersection 
 An intersection between two lines. 
 
A,B=S(k,k) 
 Both intersections between circles, or circles and lines. 
 
away(A,P) 
 away 
 Keeps the intersection A away from the point P. 
 
M=M(A,B) 
 middle 
 The midpoint of AB. 
 
g=pl(g,A) 
 parallel 
 The parallel through A to g. 
 
g=p(g,A) 
 plumb 
 The perpendicular through A to g. 
 
a=w(A,B,C) 
 angle 
 The angle A,B,C 
 
a=w(A,B,90) 
  An angle of fixed size. 
 
A=area(P1,P2,P3) 
 area 
 Creates an area with these corners. 

Q=quadric(P1,P2,P3,P4,P5)
 Creates a conic section through these points.

F=function(a,b,d,t,xt,yt)
 Creates a function on [a,b] with step size d, plotting xt,yt,
 which are expressions depending on the variable t.

value(P,0,1) 
 value 
 Fixes the coordinates of the point 
 
value(s,2) 
  Fixes the length of the segment. 
 
value(k,2) 
  Fixes the radius of a circle. 
 
value(w,90) 
  Fixes the size of an angle. 
 
value(true,o) 
  Sets the display of the value for o. 
 
value(o) 
  Sets the display of the value for o to on. 
 
value(true) 
  Sets the default display of values. 
 
name(o,p) 
 name 
 Sets the name of o to p. 
 
name(true,o) 
  Sets the display of the name for o. 
 
name(o) 
  Sets the display of the name for o to on. 
 
name(true) 
  Sets the default display of names. 
 
hide(true,o) 
 hide 
 Hides or un-hides o. 
 
hide(o) 
  Hides o. 
 
hide(true) 
  Sets the default hidden state for objects. 
 
col(green,o) 
 color 
 Sets the color of o to red, green, blue or brown. 
 
col(green) 
  Sets the default color. 
 
th(thick,o) 
 thickness 
 Sets the thickness of o to thick, normal or thin. 
 
th(thick) 
  Sets the default thickness 
 
type(square,P) 
 type 
 Sets the point type to square, circle, diamond or point. 
 
type(square) 
  Sets the default point type. 
 
part(k) 
part(true,k) 
 partial 
 Sets the object k to partial display or full display. 
 
part(true) 
  Sets the default partial state. 
 
fill(o) 
fill(true,o) 
 fill 
 Sets the object o to filled state or outline state. 
 
back(o) 
back(true,o) 
 background 
 Sets the object o to the background or not. 
 
window(0,0,5) 
 window 
 Sets the view window to width 2*5 and center (0,0). 

valid(o)
valid(true,o)
 Treat segments and rays as lines in intersections and in
 perpendicular lines. o is the intersection or the perpendicular.

obtuse(a)
obtuse(true,a)
 Set angles so that they can become greater then 180 degrees.

solid(a)
solid(true,a)
 Set the object to the nontransparent state.

restrict(c,A,B)
 Restrict a circle to become an arc from A to B.

valid(o)
valid(true,o)
 Remove the restrictions from perpendicular lines and intersection.
 These objects will be valid, even if the intersection is outside a
 segment or an arc.

rename(A,B)
 Rename the object A to B.
 
__Macros__ can be used too. Names left of = will be assigned to
targets. If there are several targets, the names must be separated by
commas. One additional parameter may be used to assign a value for an
object, which would be prompted in interactive mode.

.descritivefiles run
.related visual save
파일에 작도물 기술하기
(Descriptive constructions in files)

기술되어진 작도물은 파일로부터 가져올 수 있다.
바꾸어 말하면 작도과정을 기술하고 작도물을 불러온다.

과정은 가로 줄 형태로 위에 설명된 명령을 사용한다.
줄 형태의 주석 //...이 사용되고, 파일은 다음 형태의 매크로를 포함할 것이다.

 macro U 
 // Constructs a circle through three points
    parameter A=point // Select first point
    parameter B=point // Select second Point
    parameter C=point // Select third point
    g1=MS(A,B)
    g2=MS(A,C)
    U=intersection(g1,g2)
    target k=circle(U,A)
 end

The indents are optional.
만약 매크로가 상호작용적으로 사용된다면 변수줄에서 주석은 prompt으로써 사용된다. 
이 매크로는 두 변수로 이루어진 MS매크로로 부른다.

 macro MS
  param A=point
  param B=point
  partial(true)
  k1=circle(A,B)
  k2=circle(B,A)
  partial(false)
  P1,P2=intersection(k1,k2)
  target g=line(P1,P2)
 end

만약 대상을 작도하는 명령이 2개의 개체를 작도한다면, 대상은 분리되어 정의될 수 있다.

 A,B=intersection(g,k)
 target B

만약 매크로가 한 대상보다 많이 가지고 있다면, 모든 대상들은 지정되어야만 한다.

 A,B=test(...)

Prompt들은 개체이름 앞에 핵심prompt에 의하여 정의된다.

 k=circle(A,5)
 prompt k

여기에 변수로써 사용되는 매크로의 예가 있다.

 macro MS
 // Mittelsenkrechte
  A=point
  B=point
    parameter s=segment(A,B)
    ...
 end

만약 원들이 변수로써 사용된다면, 거기에는 특별한 규칙이 있다.

 M=point
 parameter circle(M)

이런 종류의 원은 오직 변수안에서 사용될 수 있다.

특별한 명령"showall"은 모든 중간의 개체를 보여준다. 
그렇않으면 오직 대상들만 보여질 것이다. 명령"invisible"은 대상이 아닌 모든 개체를 숨긴다.

__Descriptive쬬onstructions__ can be loaded from a file. Alternatively
edit the description and then load the construction. 

The syntax is line oriented and uses the commands described above.
Line comments //... may be used. The files may contain __macros__ in
the following format.

 macro U 
 // Constructs a circle through three points
    parameter A=point // Select first point
    parameter B=point // Select second Point
    parameter C=point // Select third point
    g1=MS(A,B)
    g2=MS(A,C)
    U=intersection(g1,g2)
    target k=circle(U,A)
 end

The indents are optional. __Comments__ in the parameter lines are used
as prompts, if the macro is used interactively. This macro calls the
macro MS with two parameters.

 macro MS
  param A=point
  param B=point
  partial(true)
  k1=circle(A,B)
  k2=circle(B,A)
  partial(false)
  P1,P2=intersection(k1,k2)
  target g=line(P1,P2)
 end

If the command constructing the target constructs two objects, the
target can be defined separately.

 A,B=intersection(g,k)
 target B

If a macro has more than one target, all targets must be assigned.

 A,B=test(...)

Prompts are defined by the keyword prompt in front of an object name.

 k=circle(A,5)
 prompt k

Here is an example of a macro using a segment as a parameter.

 macro MS
 // Mittelsenkrechte
  A=point
  B=point
    parameter s=segment(A,B)
    ...
 end

If circles are used as a parameter, there is the special syntax

 M=point
 parameter circle(M)

This kind of circle can only be used in parameters.

The special command "showall" shows all intermediate objects.
Otherwise, only targets will be visible. The command "invisible"
superhides all objects that are no targets.

.assignments
.related save restricted colors comment
과제
(Assignments)

과제(또는 임무)란 주어진 조건을 이용하여 지정된 개체를 작도하는 과정이다.
컴퓨터는 작도되어야 할 개체만 체크하므로 해결방법(작도과정)은 주어진
것과 달라도 된다. 사용자가 만들어야 할 개체를 만들면 축하 메세지를 받게 된다.
만들어야 할 개체가 숨겨진 개체가 아니라면 밝은 색으로 표시된다.

과제는 사용자에게 보여줄 마지막 개체와 만들어야 할 개체를 선택함으로 만들어 진다.
만들어야할 개체를 선택할 때 Shift키를 누르고 선택한 개체는 작도여부를 확인하지 않는다.

과제를 확인하기 위해서는 특별메뉴의 '과제확인'을 클릭한다.
과제를 수행하는 사용자와는 다르게 이 메뉴에서는 사용할 수 있는 모든 도구 모음을 가지고 있다.
과제를 수행하기 위한 아이콘을 제한할 수 있다.

만들어야 할 개체가 다각형일 경우 개체는 최소한의 꼭지점에 의해 정의되어야 한다.
과제를 수행하는 사용자가 다각형의 변에 만든 추가점은 건너뛴다.(무시한다.)

Assignments (or jobs) are incompletely displayed constructions, which
the user is supposed to finish. The computer will only check for the
constructed target object, and the solution itself might be different
than the give one. The user will receive a message, as soon as he has
completed the construction. The target objects will be displayed in a
light color, unless they are hidden before the construction is saved.

Assignments are generated by choosing the last object to be displayed
to the user. Furthermore, there must be target objects. Targets are
not checked for the solution, if they are generated pressing the SHIFT
key.

To test the assignment, click on the menu entry for this. In contrast
to the user, you will have the complete set of tools available,
however. You can use the restricted icon bar to save the assignment.

Area objects as targets should be defined by the least set of corner
points. If the solving user creates additional points on the sides of
the polygons those points will be skipped.

.browser
.related online
도움말 브라우저 시작하기
(Starting the help browser)

브라우저에서 HTML 도움말을 시작하기 위해서는 브라우저를 설정을 해야 한다.
대화상자의 명령어 줄에 브라우저를 입력한다.
브라우저의 경로에 빈 칸이 있다면 쌍따옴표 안에 전체경로를 입력한다.

그리고 도움말 인덱스 파일의 경로를 추가한다.
이것은 미리 설정되어 있어야 한다.
도움말을 찾을 수 없는 경우 대화상자에 설정된 웹 페이지를 사용하게 된다.

기본 브라우저는 윈도우 시스템의 익스플러러이고, 어떤 곳에서는 넷스케이프이다.

To start the HTML help in the browser, you need to configure it. Enter
the command line to the browser in the dialog. If the path contains
blanks, include the browser in double quotes.

Moreover, add the path to the help index file. This should be
preconfigured already. If no help is found, the configuration dialog
will use the web page.

The default browser is the explorer on Windows systems, and Netscape
elsewhere.

.comment
.related assignments parameter htmlexport
주석
(Comments)

모든 작도는 주석을 가질 수 있다. 주석은 작도를 불러올 때 사용자에게 표시된다.
또한 주석은 HTML로 내보낼 수 있다.

과제는 그것이 보여질 때 사용자에게 표시되는 특별한 주석을 가진다.

매크로는 사용법과 목적을 설명해 주는 주석을 가질 수 있고 또한 가져야만 한다.

Every construction can have a comment. The comment will be displayed
to the user when he loads the construction. Moreover, comments can be
exported to HTML.

Assignments will have a special comment, displayed to the user, when
the assignment is presented.

Macros can and should have comments too, explaining their usage and
purpose.

.fonts
.related zoom save
폰트
(Fonts)

폰트는 전체적으로 또는 각 개체에 대해 사용될 수 있다.
전체적인 설정이 우선권을 갖는다.

C.a.R은 두가지 크기와 굵기의 폰튼를 사용한다.
폰트와 점은 작도에서 결정된다.
작은 창이나 애플릿에서는 매우 작은 폰트와 점으로 나타난다.
그러므로 최소 점 크기가 있다.
굵은 폰트는 작은 화면사이즈와 높은 해상도에서 권장된다.

그림파일 내보내기에서 폰트는 정확한 크기로 사용될 수 있다.
미리보기는 그림파일로 내보내질 작도의 외양과 똑같은 모양을 보여준다.

Fonts can either be set globally or for each object. Global settings
have preference.

C.a.R. uses fonts in two sizes and strokes. Fonts and points are
scaled with the construction, however. For small windows or applets,
this would lead to very small fonts and points. Thus there is a
minimal point size. Bold fonts are recommended for small screen sizes
and high resolutions.

Note, that fonts for graphics export can be scaled to an exact size.
The screen preview for the graphics export scales the fonts
to get the same visual appearance of the construction.

.sizes
크기
(Sizes)

이 대화상자에서 최소의 선, 점, 폰트 크기를 설정할 수 있다.
모든 크기의 화면에서 똑같은 효과를 유지하기 위해서는 이 메뉴에서 크기를 설정한다.
하지만 여기에서는 최소 크기를 설정할 수 있다.

뿐만아니라 화살표 크기, 커서에 의해 선택된 개체의 크기도 선택할 수 있다.

그림 내보내기에서 이러한 값들은 출력크기에 관계없이 정확하게 설정할 수 있다.

이러한 크기는 애플릿으로 내보내기 할 때도 적용된다.

In this dialog, you can set the minimal line, point and font sizes.
To keep the same impression on all screen sizes, these items are
scaled. But you can set the minimal sizes here.

Moreover, you can set the arrow size, and the selection size for cursor
selection of objects.

Note that for graphics exports, you may set the these values exactly, independent
of the size of the output.

These sizes can be exported to applets.


.save
.related assignments parameter descriptivefiles print defaultmacros filedialog
파일 저장과 불러오기
(Saving and loading files)

작도는 컴퓨터에 XML형식으로 저장된다. 이 형식은 사람이 읽을 수 있다.
정상적인 작도는 확장자가 ".zir"로 저장된다. 과제는 ".job", 매크로는 ".mcr"의
확장자로 각각 저장된다.

작도는 매크로를 포함할 수 있다. 현재 매크로가 작도와 함께 저장될 것인지를
스위치로 설정할 수 있다. 몇 개의 작도에서 매크로를 제외하고 싶다면 새로운
작도를 불러오기 전에 모든 매크로를 지우는 것이 좋다. 이것의 설정은 스위치된다.

파일의 확장자에 "z"를 추가하면 압축할 수 있다. 파일을 서버에서 가져올 때
다운로드되는 시간을 최소로 하기를 원하지 않는다면 사용할 필요는 없다.

과제, 매크로, run파일을 불러오는 특별한 메뉴가 있다.

참고 : 파일 대화상자

Constructions are saved in XML-format to computer files. This format
is human readable. Normal constructions have the extension ".zir",
and assignments have the extension ".job". Macros use ".mcr".

Constructions may contain macros. There is a switch, if the current
macros should be saved along with the constructions or not. To avoid
accumulating macros from several constructions, it might be a good
idea to delete all macros before a new construction is loaded. There
is a switch to do this by default.

Files can be compressed by adding "z" to their extension. There is no
need to do this, unless you want to minimize download time, when
the file comes from a server.

There are special menu items to load assignments, to load macros, and
to load descriptive constructions in files.

See: File Dialog

.filedialog
.related save settings
파일 대화상자
(The File Dialog)

자바를 사용할 때 윈도우나 Linux의 파일 대화상자에는 몇가지 결점이 있기때문에
C.a.R.는 고유한 파일 대화상자를 사용한다.  만약 일반적인 파일 대화상자를
사용하고 싶다면 '특별한 설정-대화창 모양 바꿈'에서 설정할 수 있다.

C.a.R.의 파일 대화상자는 파일, 폴더, 파일형식 히스토리를 사용한다.(최근파일, 최근폴더)
최근폴더와 최근파일은 드롭다운 선택 메뉴를 가지고 있고,
'폴더', '파일', '파일형식'에서는 위쪽 화살표와 아래 화살표를 사용할 수 있다.

왼쪽패널에 있는 폴더 이름을 더블클릭하여 폴더를 탐색할 수 있다.
"뒤로"버튼은 이전 폴더를 연다. 파일을 선택하려면 오른쪽 패널에서
파일이름을 더블클릭하거나 파일을 선택하고 "불러오기" 버튼을 클릭한다.

파일이름에 빈 칸을 넣는 것도 가능하다. '파일형식'에서 "?"는 하나의 글자를,
"*"는 문자열을 나타내며 하나 또는 여러개의 "?", "*"을 사용할 수 있다.

"폴더만들기" 버튼으로 새로운 폴더를 만들 수 있다. 폴더 이름을 폴더
영역에 입력한다. 이 대화상자에서는 파일이나 폴더를 삭제할 수 없다.

사용자의 홈폴더가 만들어졌다면 "기본폴더"버튼으로 C.a.R.의 기본 폴더로
쉽게 이동할 수 있다. 영문이름은 "CaR Files"이다. 그런 이름이 없으면 버튼은
사용자의 홈 폴더로 이동한다. 윈도우에서 영문이름은 "My Documents"이다.
Linux에서는 홈 폴더로 이동한다. SHIFT-CTRL키를 누르고 "기본폴더" 버튼을
누르면 기본폴더를 변경할 수 있다. 현재 폴더가 C.a.R.의 새로운 기본폴더가
된다. SHIFT-CTRL키를 누르고 "기본폴더"를 다시 클릭하면 이전 설정으로 되돌릴
수 있다.

C.a.R. implements an own file dialog since the file dialogs of Windows
and Linux had some defects when used from Java. If you want to use the
normal system file dialog, however, you can switch to it in the
special settings.

The file dialog of C.a.R. uses histories for files, directories and
filters. The directory and file history has a special drop down choice
menu, and the history of the file and pattern fields show when the
cursor up or down key is pressed in these fields.

Navigate in the directories with a double click on the directory name
in the left panel. The "Back" button opens previous directories. To
choose a file, you can double click on its name in the right panel, or
select it and use the action button.

It is possible to enter several file patterns separated by spaces.
File patterns can contain one or more place holders, "?" for single
letters and "*" for strings.

With a button a new directory can be created. Enter the name of the
directory into the directory field. Files or directories cannot be
deleted in this dialog.

The home button brings you to the home directory of C.a.R., if
installed in the home directory of the user. The English name is "CaR
Files". If there is no such file, the button brings you to the user
home directory. In Windows, the English name is "My Documents". In
Linux, the home button brings you into your home directory. It is
possible to change the home directory by pressing the home button with
SHIFT-CTRL. The current directory will become the new home directory
for C.a.R. Another click with these keys restores the old settings.

.print
.related exportsettings print
인쇄와 작도 내보내기
(Print and Export Constructions)

작도한 결과를 다른 프로그램으로 내보내거나 외부에서 볼 수 있는 몇가지 방법이 있다.

우선, 작도를 인쇄할 수 있다. 1단위는 정확하게 1cm로 인쇄할 수 있는 옵션이 있다.
이 옵션을 위해서는 작도창을 종이에 맞게한다.

그리고 다양한 그래픽 파일과 벡터 방식으로 내보낼 수 있다.
워드프로세서에서는 정확한 출력폭을 지원하는 PNG파일을 추천한다.

PNG 파일로 내보내기 하면 대화상자가 나타나는데 여기서 출력할 사이즈를 설정한다.
다른 방법으로는 화면크기에 상대적인 요소를 사용한다. 가로, 세로의 길이를 cm와
해상도에 입력하는 것도 가능하다. 다양한 형식을 지원하는 드롭다운 상자가 있다.
만약 "1:1(cm) 비율로 인쇄하기"를 사용하면 1단위=1cm 와 300 dpi해상도로 설정된다.
출력은 종이에 맞춰진다는 것을 명심하라.

선, 글자, 점은 작은 그림에서는 너무 작을 수 있기 때문에, 크기를
cm로 지정하는 것이 가능하다. 화면에서 효과를 확인하려면 미리보기를 이용한다.

LaTeX 프로그램 코드를 사용하기 위해서, C.a.R.는 bounding box 파일과
이미지 파일 두 가지를 생성할 수 있다. 이미지파일은 PNG파일과 같지만
확장자는 "ztx" (zirkel tex)이다. 작도에서 문자열과 식을 그리는 것은
LaTeX에도 그대로 가능하다. 대화상자에서 LaTeX에 의해 수행되어야 하는
문자열을 선택한다. 그래픽 내보내기는 필요한 LaTeX 명령어를 만들어 준다.
LaTeX 내보내기의 이 형식은 pdflatex과 latex에서 잘 동작한다. LaTeX의
소스에서 "graphicx" 패키지를 가져올 수 있다. 이미지 파일을 불러오기
위해서 명령어줄에 다음과 같은 방법으로 입력한다.

 \begin{figure}
 \centering
 \input{image.ztx}
 \end{figure}

C.a.R.는 또한 화면을 클립보드에 그림파일로 복사할 수 있다.
PNG 출력과 같은 크기로 적용된다.
작도를 화면 그대로 복사하려면 내보낼 크기 선택 창에서 "창크기"를 선택한다.

PDF형식은 그림크기를 cm로만 지정할 수 있다.
PDF는 선 두께, 글자 크기, 점 크기를 설정할 수 있다.

There are several ways to export your constructions to other programs
or view them externally. 

First of all, you can print your constructions. There is an option to
print in exact scaling, so that units of 1 are 1 cm exactly. Make
sure, the construction window fits on the paper for this option.

Moreover, you can export in various graphics and vector formats. For
word processors, I recommend using PNG, properly scaled for the exact
output width.

For PNG output, a dialog will open, where the output size is set.
Alternatively, use a factor relative to the screen size. It is also
possible to determine the size using the graphics width and height in
cm and the resolution. There is a drop down selection box for various
formats. If "1:1 scaled" is used, a scaled version (1 unit = 1 cm)
with a 300 dpi resolution is used. Make sure, the output fits on your
paper.

Since lines, fonts and points may become too small in small pictures,
it is possible to scale these sizes in cm. Use the preview to see
the effect on the screen.

For use with the typesetting program LaTeX, C.a.R. can generate two
accompanying files, the bounding box file, and a file to draw the
image. The latter has the same name as the PNG file, but an extension
"ztx" (zirkel tex). It is possible to let LaTeX do the drawing of the
strings and equations in the construction. In the dialog, select the
type of strings that should be done by LaTeX. The graphics export will
generate the necessary LaTeX commands. This type of LaTeX export will
work with pdflatex and latex. In the LaTeX source, it is necessary to
import the "graphicx" package, and to load the image file with an input
command, like in

 \begin{figure}
 \centering
 \input{image.ztx}
 \end{figure}

C.a.R. can also copy graphics to the clipboard. The same scaling will
apply like in PNG output. If a screen dump of the construction is
needed, use "screen size" in the scaling dialog.

For PDF output, only set the picture sizes in cm. PDF can also scale
lines, fonts and points.


.construction
.related hide reorder
개체 목록
(List of objects)

C.a.R는 메뉴와 부합하여 작도 개체목록을 표시할 수 있다. 이 목록은 보이지
않는 개체를 편집할 때 사용될 수 있다. 사실 이것은 완전하게 숨겨진 작도 단계에
접근할 수 있는 유일한 방법이다. 목록에 있는 줄은 해당 개체와 똑같은 색을 가진다.
완전하게 숨겨진 개체는 괄호로 묶여 있다.

어떤 형태의 개체는 대화상자의 첫줄에 있는 드롭다운 메뉴에 의해 표시가 제한된다.
완전하게 숨겨진 개체는 "모든 개체" 상태에서만 보여질 수 있다.

보여지는 순서는 작도된 개체의 순서 또는 개체가 저장된 순서이다.
프로그램이 나중에 정의된 개체와 관련이 전혀 없는 개체를 확인할 수 있도록
개체의 순서를 바꿀 수 있음을 주의하라.

C.a.R can display a list of objects in your construction with the
corresponding menu entry. This list can be used to edit invisible
objects. In fact, it is the only way to access completely hidden
construction steps. The lines in the list have the same colors as the
objects. Completely hidden objects are in brackets.

Restrict the display to certain types of objects with the drop down
menu in the first line of the dialog. Completely hidden objects will
only be visible in the "All Objects" state.

The view is either sorted in the order the objects were constructed,
or in the order the objects are stored. Note that the program may
change the order of the objects to make sure no object refers to
another object, which is defined later.

.colors
.related htmlexport
색 지정
(Set colors)

C.a.R.는 개체를 좋아하는 색깔로 다양하게 설정할 수 있다.
색은 작도와 함께 저장되지 않지만 HTML로 내보낼 수 있다.

색은 빨강, 녹색, 파랑의 조합으로 구성된다.
기본 색을 가장 적합하게 조절할 수 있다.

Set the various colors of C.a.R. to your liking. Colors will not be
saved with your construction, but are exported to HTML.

Colors are composed in the red, green and blue color model. Switch
back to default colors for best compatibility.

.settings
.related restricted iconbar tips beginner
특별한 설정
(Special Settings)

이 대화창은 고급 사용자를 위한 몇가지 설정을 포함하고 있다.
하지만 몇가지는 초보자 방식에서 영향을 받는다.

개체가 움직이는 동안 개체의 이름을 표시하는 것을 선택/해제할 수 있다.
이 옵션은 혼란스러울 수도 있지만 어떤 경우에는 아주 유용하다.
C.a.R.는 고정된 개체로만 제한할 수도 있다.

중요한 동작(가져오거나 닫기 등)을 하기 전에 확인할 수 있도록 선택/해제할 수 있다.

개체 선택창을 사용할 수 없는 경우에 마우스 위치에서 유일하게 결정되지 않는
선택이 있다면 프로그램은 항상 첫번째 개체를 선택한다.

작도 미리보기를 끄거나 점을 제한 할 수도 있다.
기본 설정으로 대부분의 도구는 마지막 매개 점이 선택되기 전에 결과를 미리 보여준다.
초보자 방식에서는 점만 미리 보여진다.
왜냐하면 다른 개체는 사용자가 잘못할 가능성이 있기 때문이다.

아이콘 바를 창의 아래쪽에 위치시킬 수 있다.
그리고 도구 팁을 보이지 않게 할 수 있다.

어떤 사용자는 윈도우시스템의 파일 대화창을 원하기도 한다.
나는 몇가지 이점이 있기 때문에 C.a.R의 파일 대화창을 더 좋아한다.
하지만 파일을 지우거나 이름을 바꿀 수는 없다.
그러나 폴더를 만들 수는 있다.

항상 UTF-8 인코딩을 사용해야만 한다.
하지만 C.a.R는 작도 파일을 지역적인 인코딩을 사용할 수 있도록 선택할 수 있다.
이것은 파일에서 주석과 설명에 영향을 준다.
작도를 스스로 편집하기를 원하거나 UTF-8 편집기를 가지고 있지 않다면 지역적인 설정을 사용하라.

smartboard mode에서는 드래그하는 것이 다르게 작동한다.
smartboard는 마우스의 움직임이 보고되지않고 드래그하는 것에 의해 대체된다.
작도를 끝내기 위해서는 한 번 더 클릭해야 한다.
작도단계를 미리보기할 때만 중요하다.

기본적으로 프로그램은 파일을 겹쳐쓰기 전에 백업한다.
이것이 굳이 필요하지 않다면 백업파일 사용을 해제한다.

오른쪽 마우스 버튼을 한 번 클릭 또는 더블 클릭으로 매크로 선택창 열기를 지정할 수 있다.

저사양 컴퓨터 시스템에서는 부드러운 그래픽 대신 간단한 그래픽을 사용하 수도 있다.

화면 해상도의 제한 때문에 점은 항상 정확한 정사각형으로 표시되지 않을 수 있다.
점은 직사각형으로 표시되거나 오른쪽에 반점이 표시될 수도 있다.


This dialog contains some settings for advanced users. Some of these
settings are affected by the beginner mode, however.

First of all, there is a switch for the display of object labels while
the object is moved. This option may be disturbing, but it is quite
useful in some cases. C.a.R. can restrict that to fixed objects only.

Then, there are switchs for some questions the program asks before
critical actions.

If the dialog to choose objects is disabled, the program will always
select the first object, even if the selection cannot be determined
uniquely from the mouse position.

It is also possible to turn off the construction preview, or restrict
it to points. By default, most tools show a preview of the result
before the last parameter point is selected. In the beginner mode, only
points are shown in preview, since other objects tend to mislead the
users.

The icon bar can be placed to the lower edge of the window, and
tooltips can be disabled.

Some users want to use the system file dialog. I prefer mine, and it
does indeed have some advantages. However, it cannot delete or rename
files. It can create directories, however.

One should use UTF-8 encoding all the time, but C.a.R can also choose
to use the local encoding for construction files. This affects
comments and descriptions in the files. Use the local setting only,
if you want to edit the construction yourself, and if you do not have
a UTF-8 editor.

In the smartboard mode, dragging will behave differently. A smartboard
cannot report mouse movements, so they are replaced by drags. You have
to click once more to complete the construction. This is only
important for the preview of construction steps.

By default, the program writes backups of the files before
overwriting. If you find you do not need these, disable the backup
feature.

The user can choose to call the macro popup dialog with a single
or a double click of the right mouse button.

On a slow system, one may want to disable the smooth graphics with
anti-aliasing.

Due to obvious limitations in the screen resolution, points can either
be drawn as exact rectangles, or exactly at the right spot, but not
always as exact squares. One can determine the prefered method here.

.exportsettings
.related settings print
그래픽 내보기를 위한 설정
(Settings for Graphics Export)

점과 글자는 크기를 조절할 수 있다.
최소 크기가 사용되지 않는다면 글자의 크기가 작아지기 때문에 중요하다.

비트맵은 기본적으로 흰색 배경으로 생성된다.
백그라운드 색상을 설정할 수 있다.

Normally, points and fonts are scaled. But the minimal sizes are 
respected, if this is enabled, since fonts would become to small
otherwise. To get large fonts in small prints, use the scaling feature
in the graphics export.

Bitmaps are normally generated on a white background. You can tell the
program to use your background color.


.reorder
.related circle angle expressionsyntax
점 순서바꾸기
(Reorder points)

작도 순서를 바꿀 수 있다.
이것을 위한 특별한 도구가 있다.
이 도구로 개체를 선택하면 프로그램은 가능한 작도의 출발점에서 멀리 이동하려고 시도할 것이다.
그려진 개체의 순서를 조절할 때 유용하다.

하지만, 순서를 바꾸는 것은 이제는 쓸모가 없다.
C.a.R.는 개체가 다음 개체와 연관이 되면 작도연결 순서를 바꾼다.
더구나 조건편집을 사용하여 개체순서를 조절할 수 있다.

It is possible to change the order of the construction manually. There
is a special tool for this, and if you select an object with this
tool, the program will try to move this object as far to the start of
the construction as possible. This may be useful to control the sequence
the objects are drawn.

However, reordering is obsolete now. C.a.R. reorders the cosntruction
chain itself, if objects refer to later objects. Moreover, it is
possible to control the sequence of drawing using conditional
formatting.


.tips
.related online browser start move intersection expression reorder
팁
(Tips)

이 도움말 부분에서는 공통 문제를 해결하는 몇가지 팁이 있다.

잘못된 작도. 작도를 검사하기 위해서 기본이 되는 점을 움직여본다.
작도가 유효하게 남아있지 않다면, 가장 공통된 이유는 교점을 적당하게 선택하지 않은 것이다.
우연히 교점을 지나는 직선을 정의했을 수도 있다.

잘못된 교점. 작도가 유효하지 않게 되었다면, 기본점의 순서가 변화될 때
또는 한 점을 다른 쪽으로 가볍게 움직일 때 교점이 올바로 선택되었는지에 대한 문제에 직면할 수 있다.
그래서 모든 상황에서 유효한 작도를 하고 싶다면 모든 교점이 제대로 선택되었는지를 확인하라.
C.a.R의 자동선택이 제대로 되지않는다면 수작업으로 교점을 선택할 수 있다.
속성창을 열고 "가깝게" 또는 "멀리"를 누른다.
그러면 교점으로부터 가까운 점 또는 먼 곳의 점을 선택한다. 
교점은 교점에 "가깝게" 설정할 수 있다.
이 경우에 교점은 겹치게 된다.

In this help section, we give some tips to solve common problems.

Invalid Constructions. To test a construction, move one of the basic
points. If the construction does not remain valid, the most common
reason is that you did not choose an intersection properly. Instead,
you may have defined a line that goes through the intersection point
only by chance.

Wrong Intersection. If a construction becomes invalid, whenever the
order of the basic points is changed or if one point is flipped to
another side, you are facing the problem to choose the right
intersection point. So, if you want your construction to be valid for
all situations, make sure, you choose all intersections properly. If
the automatic selection of C.a.R. fails, you can select the
intersection by hand. Open its properties and press "Close to" or
"Away from". Then choose a point that should be nearer to or further
away from the intersection point. You can also set intersection close
to itself. In this case, the intersection will behave continously.


.keyboard
.related gui delete zoom mouse iconbar
자판 이용
(Using the Keyboard)

C.a.R.에서 대부분의 명령은 단축키가 있다.
메뉴에서 각 명령어에 대한 단축키를 볼 수 있다.
단축키는 언어에 따라 다르다.

만약 초점(focus)를 잃었다면 키보드 포커스를 작도에 부여할 필요가 있다.
마우스 오른쪽 버튼으로 빈 곳을 클릭한다.

마지막 작도한 것을 지울 때 사용하는 백스페이스키, 화면을 확대 축소하는
+/- 키, 작도를 움직이는 화살표 키 등은 유용하다.
F1키는 현재 작도와 관련된 주제의 도움말을 보여준다.

ESC키는 현재 도구를 재설정하는데 사용된다.

CTRL키와 SHIFT키는 몇 가지 도구의 동작을 바꾸는데 사용된다.

스페이스키는 Java와 윈도우즈 버전에서 버튼을 누르는데 이용된다.
어떤 시스템에서는 리턴키가 사용된다.


Most commands in C.a.R. have keyboard shortcuts. Have a look into the
menu to find the shortcut for each command. Shortcuts depend on the
language.

Note, that you need to give your construction the keyboard focus if
it looses the focus. Click on an empty spot with the right mouse
button.

Useful shortcuts are the backspace key to delete the last action,
the +/- key to zoom in and out, and the arrow keys to move the
construction. Moreover, F1 will open the context sensitive help.

The important ESC key resets the current tool.

Note that the CTRL-key  and the SHIFT-key change the behavior of some
tools.

The SPACE-key is used by Java and Windows versions to press buttons.
Some systems use the RETURN key instead.


.image
.related background
그림
(Images)

그림은 개체로서 작도에 추가될 수 있다.
그림에는 두 개 혹은 세 개의 조절점이 있다.
두 개의 조절점은 그림을 회전하거나 크기를 조절할 때 사용되고, 
세 개의 조절점은 아핀변환할 때 사용된다.
오직 두 개의 조절점을 사용하려면 두 번째 점을 더블클릭한다.

그림은 작도와 같은 폴더에 있어야만 한다.

참고 : 배경화면


Images can be added to the construction as objects. Images use either
two anchor points or three. In the first case, the image is rotated
and scaled, in the second case, an affine transformation is used. If
you want only two points, double click the second point.

These images must be in the same directory as the construction.

See also: Background Images


.language
언어설정
(Set Language)

기본적으로 C.a.R.는 동작하고 있는 운영체제 시스템의 언어로 시작된다.
프로그램에 포함된 다른 언어로 시작할 수 있다. 다음과 같이 사용할 언어의
약자를 입력하면 된다.

 영어 - en
 독일어 - de
 프랑스어 - fr
 네덜란드어 - nl
 이탈리아어 - it
 스페인어 - es
 포르투갈어 - pt
 브라질어 - br
 슬로베니아어 - sl
 덴마크어 - da
 노르웨이어 - no
 폴란드어 - pl
 러시아어 - ru
 한국어 - ko

언어설정을 위해서는 메뉴를 이용하거나 명령어줄에 "-l de"와 같이 입력하면 독일어를
사용할 수 있다.


By default, C.a.R. starts with the language of the system it is running
on. It can be told to start in any other of the implemented languages.
Use the following shortcuts for the current languages

 English - en
 German - de
 French - fr
 Netherlands - nl
 Italian - it
 Spanish - es
 Portuguese - pt
 Brazilian - br
 Slovenian - sl
 Danish - da
 Norway - no
 Poland - pl
 Russian - ru
 Korean - ko

Either use the menu item to set the language or set the command line parameter
like "-l de" for the German language.


.selfreference
.related macro point
자기 참조
(Self Reference)

예를 들면, 항상 정수변수를 가지도록 점을 정의하는 것이 가능하다.
이것을 위해서는 floor() 함수를 이용하여 좌표를 고정한다.
그렇게 고정된 점은 사용자에 의해 여전히 움직일 수 있다.
규칙은 점이 자기자신에 의해서만 참조되어야 한다는 것이다(@-참조는 카운트되지 않는다). 
이 경우에 작도의 나머지 부분이 먼저 움직이고 점은 나중에 움직인다.

이와같이 움직일 수 있는 고정된 점은 매크로에 의해 만들어질 수도 있다.
매크로를 만들 때 움직일 수 있는 고정점을 매크로 매개변수로 선택한다.
이때 매개변수인 움직이는 고정점은 Shift키를 누른채로 선택되어야 한다.
매크로가 실행될 때 매개변수로 선택된 점은 좌표가 고정된다.


E.g., it is possible to define a point which always snaps to integer
parameters. To do this, fix the coordinates using the floor(...)
function. Such a fixed point will still be moveable by the user. The
rule is that a point referring to itself only (@-references do not
count) is moveable. In this case, the rest of the construction moves
first, then the point.

Such moveable fixed points can also be created by macros. The point
must be a macro parameter, and this parameter must be selected with
the shift key, when the macro is created. When the macro runs, the
points chosen for the parameter gets the coordinate fixes.